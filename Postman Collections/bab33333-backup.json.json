{
	"info": {
		"_postman_id": "87100255-19d1-46b9-b703-9d4a4b40c028",
		"name": "Airwallex Public API - General Availability Suites",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "API Access",
					"item": [
						{
							"name": "Obtain access token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d0c9a54-3040-42e6-8c22-ccae9b80924d",
										"exec": [
											"pm.environment.set(\"bearer_token_expires_at\", JSON.parse(responseBody).expires_at);",
											"pm.environment.set(\"bearer_token\", JSON.parse(responseBody).token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10378750-8f9b-417a-a11c-ee5e12e79a2b",
										"exec": [
											"const clientId = pm.variables.get(\"clientId\");",
											"const apiKey = pm.variables.get(\"apiKey\");",
											"",
											"if (clientId === \"NIPWz6LJQKCM1WMRLs4G2g\" || apiKey === \"79d5311bff82920884e9dab1666300ac4a94ad44b40e096d8e8b9b8b5a9e0b2ab87d25c60f96960522e016f168873301\") {",
											"    throw new Error(\"Please set the values for the variables 'clientId' or 'apiKey'.\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a7ed7ccb-d786-4412-970d-fbe6ed1c0ecc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "x-client-id",
										"value": "NIPWz6LJQKCM1WMRLs4G2g"
									},
									{
										"key": "x-api-key",
										"value": "79d5311bff82920884e9dab1666300ac4a94ad44b40e096d8e8b9b8b5a9e0b2ab87d25c60f96960522e016f168873301"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{url}}/api/v1/authentication/login",
								"description": "**POST /api/v1/authentication/login **"
							},
							"response": [
								{
									"id": "ba11a0b3-2daa-43d9-b889-ed40816f977c",
									"name": "Obtain access token Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-client-id",
												"value": "NIPWz6LJQKCM1WMRLs4G2g"
											},
											{
												"key": "x-api-key",
												"value": "79d5311bff82920884e9dab1666300ac4a94ad44b40e096d8e8b9b8b5a9e0b2ab87d25c60f96960522e016f168873301"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{url}}/api/v1/authentication/login"
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"responseTime": null,
									"body": null
								}
							]
						}
					],
					"id": "1cd967d0-a033-4f7c-8a09-0906dc57cdea"
				}
			],
			"id": "f1026ae8-893c-4558-9221-a640ce4a18c9",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "09e8f1b7-2a42-4bb5-bbe6-61e52f7e47fb"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "ecbb47d2-dce2-4dca-82f0-64970c37ad89"
					}
				}
			]
		},
		{
			"name": "Issuing",
			"item": [
				{
					"name": "Authorizations",
					"item": [
						{
							"name": "Get authorization status",
							"id": "dd94b235-b8c2-4abd-ae21-18c15fbabc56",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/authorizations",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"authorizations"
									],
									"query": [
										{
											"key": "billing_currency",
											"value": "",
											"description": "Currency in which transition was billed. (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "card_id",
											"value": "",
											"description": "Unique Identifier for card",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-25T14:34:29.622+0800",
											"description": "start of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "retrieval_ref",
											"value": "",
											"description": "Retrieval reference number",
											"disabled": true
										},
										{
											"key": "status",
											"value": "CLEARED",
											"description": "Outstanding authorization status - one of PENDING, CLEARED, EXPIRED, REVERSED, FAILED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-26",
											"description": "end of Transaction Date in ISO8601 format (exclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single authorization status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let issuing_transaction_id = pm.environment.get(\"issuing_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof issuing_transaction_id === \"undefined\" || issuing_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/issuing/authorizations\";",
											"    console.warn(`Environment variable 'issuing_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items !== undefined && res.json().items.length > 0) {",
											"            console.info(`Defaulting 'issuing_transaction_id' to the first authorization ${res.json().items[0].transaction_id}`);",
											"            pm.variables.set(\"issuing_transaction_id\", res.json().items[0].transaction_id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'issuing_transaction_id' is not set, and cannot set a default, as there is no authorization returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "9df85e54-cba9-427d-b052-14bb97296e5e"
									}
								}
							],
							"id": "217c649d-cc3c-46f6-a3ab-df26d700d805",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/authorizations/:issuing_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"authorizations",
										":issuing_transaction_id"
									],
									"variable": [
										{
											"id": "b909146f-ed2c-4cf4-a05c-c2e9bfbd0a4a",
											"key": "issuing_transaction_id",
											"value": "{{issuing_transaction_id}}",
											"description": "(Required) Unique Identifier for transaction"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0b047af9-0f5a-4d6e-b7d7-0c27ad71790b"
				},
				{
					"name": "Cardholders",
					"item": [
						{
							"name": "Create a cardholder",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "abe47fc0-ee66-4ea1-a216-160c92124139"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"cardholder_id\", JSON.parse(responseBody).cardholder_id);"
										],
										"type": "text/javascript",
										"id": "f490cae7-cffc-42ea-8f10-e782d61950c9"
									}
								}
							],
							"id": "c881afb3-26aa-4f1b-8ba7-85f1771fdb86",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"上海市\",\n        \"country\": \"CN\",\n        \"line1\": \"黄浦区中海国际大厦\",\n        \"postcode\": \"25000\"\n    },\n    \"email\": \"test+{{$guid}}@example.com\",\n    \"individual\": {\n        \"date_of_birth\": \"1982-11-02\",\n        \"express_consent_obtained\": \"yes\",\n        \"identification\": {\n            \"country\": \"CN\",\n            \"expiry_date\": \"2030-08-28\",\n            \"number\": \"001238243\",\n            \"type\": \"ID_CARD\"\n        },\n        \"name\": {\n            \"first_name\": \"三\",\n            \"last_name\": \"张\"\n        }\n    },\n    \"mobile_number\": \"123456789\",\n    \"postal_address\": {\n        \"city\": \"上海市\",\n        \"country\": \"CN\",\n        \"line1\": \"黄浦区中海国际大厦\",\n        \"postcode\": \"250000\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/issuing/cardholders/create"
							},
							"response": []
						},
						{
							"name": "Get all cardholders",
							"id": "ad280569-e7aa-4d1d-8c2a-a28fa3c0fc62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders"
									],
									"query": [
										{
											"key": "cardholder_status",
											"value": "",
											"description": "Cardholder status to filter by - one of PENDING, READY, DISABLED",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get cardholder details",
							"id": "145741de-e727-497c-9986-2e669a02cb2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders/:cardholder_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders",
										":cardholder_id"
									],
									"variable": [
										{
											"id": "1a21d3ec-5bef-4523-b998-a0ded11887ac",
											"key": "cardholder_id",
											"value": "{{cardholder_id}}",
											"description": "(Required) Unique Identifier for cardholder"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a cardholder",
							"id": "5261ca38-a876-4da9-9edd-1ae91672d93f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": {\n        \"city\": \"上海市\",\n        \"country\": \"CN\",\n        \"line1\": \"黄浦区中海国际大厦\",\n        \"postcode\": \"25000\"\n    },\n    \"individual\": {\n        \"date_of_birth\": \"1982-11-02\",\n        \"express_consent_obtained\": \"yes\",\n        \"identification\": {\n            \"country\": \"CN\",\n            \"expiry_date\": \"2030-08-28\",\n            \"number\": \"001238243\",\n            \"type\": \"ID_CARD\"\n        },\n        \"name\": {\n            \"first_name\": \"三\",\n            \"last_name\": \"张\"\n        }\n    },\n    \"mobile_number\": \"123456789\",\n    \"postal_address\": {\n        \"city\": \"上海市\",\n        \"country\": \"CN\",\n        \"line1\": \"黄浦区中海国际大厦\",\n        \"postcode\": \"250000\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cardholders/:cardholder_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cardholders",
										":cardholder_id",
										"update"
									],
									"variable": [
										{
											"id": "0b376e81-6dcf-4853-9de2-cba2f826ee11",
											"key": "cardholder_id",
											"value": "{{cardholder_id}}",
											"description": "(Required) Unique Identifier for cardholder"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2d3d7f21-72c2-4adc-a7db-85b3b04c0673",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":cardholder_id\"))",
									"    return;",
									"",
									"let cardholder_id = pm.environment.get(\"cardholder_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof cardholder_id === \"undefined\" || cardholder_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/issuing/cardholders\";",
									"    console.warn(`Environment variable 'cardholder_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items !== undefined && res.json().items.length > 0) {",
									"            console.info(`Defaulting 'cardholder_id' to the first card ${res.json().items[0].cardholder_id}`);",
									"            pm.variables.set(\"cardholder_id\", res.json().items[0].cardholder_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'cardholder_id' is not set, and cannot set a default, as there is no cardholder returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "ed2ca997-0635-4c2a-b1de-deab5837e734"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f47a7c20-aad2-4a3e-b1f7-75afcd058ca4"
							}
						}
					]
				},
				{
					"name": "Cards",
					"item": [
						{
							"name": "Create a card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"card_id\", JSON.parse(responseBody).card_id);"
										],
										"type": "text/javascript",
										"id": "fe884b3b-b7cd-4901-80dc-ca5eb8213a15"
									}
								}
							],
							"id": "7b064d3b-2856-44b3-bf65-1f175081aee4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorization_controls\": {\n        \"allowed_transaction_count\": \"MULTIPLE\",\n        \"transaction_limits\": {\n            \"currency\": \"USD\",\n            \"limits\": [\n                {\n                    \"amount\": 10000,\n                    \"interval\": \"PER_TRANSACTION\"\n                }\n            ]\n        }\n    },\n    \"created_by\": \"Postman Test\",\n    \"form_factor\": \"VIRTUAL\",\n    \"issue_to\": \"ORGANISATION\",\n    \"primary_contact_details\": {\n        \"email\": \"test@example.com\",\n        \"full_name\": \"Postman Test\",\n        \"mobile_number\": \"123456789\"\n    },\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/issuing/cards/create"
							},
							"response": []
						},
						{
							"name": "Get sensitive card details",
							"id": "372595c4-0e13-4aab-bb19-189ff6ab8e9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/details",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"details"
									],
									"variable": [
										{
											"id": "18d8e1a5-e00b-4c64-8e78-abf84f500bbf",
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all cards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "9934936b-66ad-4cb7-86ee-f3ee992d221d"
									}
								}
							],
							"id": "e1048e8c-9b77-487c-8421-7d12cc265874",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards"
									],
									"query": [
										{
											"key": "card_status",
											"value": "",
											"description": "Current card status\nOne of PENDING, FAILED, INACTIVE, ACTIVE, LOST, STOLEN, CLOSED, BLOCKED",
											"disabled": true
										},
										{
											"key": "cardholder_id",
											"value": "",
											"description": "The id of the cardholder for the card, if it is an employee card.",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "Created_from_date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Will be used to return cards whose nickname exactly matches the value of this field.",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "Created_to_date in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate a card",
							"id": "e6ec89ea-d101-48e1-a325-34bcddd995f0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"activate"
									],
									"variable": [
										{
											"id": "6e941dad-d19d-44bc-be60-909bbc8bb13c",
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card details",
							"id": "7c0d02ea-ed2e-4151-9901-af98a88e0ed9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id"
									],
									"variable": [
										{
											"id": "dde2d083-7ae6-417d-acd0-142eb29c6e10",
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card remaining limits",
							"id": "4cd4cd29-e854-4964-a6ad-bbe8fce39f8b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/limits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"limits"
									],
									"variable": [
										{
											"id": "9c97596b-eab8-4f8c-b61d-35cc0d37e0fb",
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a card",
							"id": "fd95049e-8a52-4293-ad17-5f7b66a3d20d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorization_controls\": {\n        \"allowed_transaction_count\": \"MULTIPLE\",\n        \"transaction_limits\": {\n            \"currency\": \"USD\",\n            \"limits\": [\n                {\n                    \"amount\": 20000,\n                    \"interval\": \"ALL_TIME\"\n                }\n            ]\n        }\n    },\n    \"card_status\": \"ACTIVE\",\n    \"nick_name\": \"Postman Test Card\",\n    \"primary_contact_details\": {\n        \"email\": \"test@example.com\",\n        \"full_name\": \"Postman Test\",\n        \"mobile_number\": \"123456789\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/issuing/cards/:card_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"cards",
										":card_id",
										"update"
									],
									"variable": [
										{
											"id": "bf83626b-6b59-4c64-a480-d02be72ebf7c",
											"key": "card_id",
											"value": "{{card_id}}",
											"description": "(Required) Unique Identifier for card"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "961e3fd9-d203-46e4-bd20-599bdbe8a67f",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":card_id\"))",
									"    return;",
									"",
									"let card_id = pm.environment.get(\"card_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof card_id === \"undefined\" || card_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/issuing/cards\";",
									"    console.warn(`Environment variable 'card_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items !== undefined && res.json().items.length > 0) {",
									"            console.info(`Defaulting 'card_id' to the first card ${res.json().items[0].card_id}`);",
									"            pm.variables.set(\"card_id\", res.json().items[0].card_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'card_id' is not set, and cannot set a default, as there is no card returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "d228193b-e982-4c0a-9821-5929a7da646a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2a171643-8015-40e3-8c86-f2cf0855b5e0"
							}
						}
					]
				},
				{
					"name": "Config",
					"item": [
						{
							"name": "Get issuing config",
							"id": "87acb764-f1bd-4436-bfbf-519f448ff45e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{url}}/api/v1/issuing/config"
							},
							"response": []
						},
						{
							"name": "Update issuing config",
							"id": "9bf053bb-df95-4530-9a02-da030d518d91",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"remote_auth\": {\n        \"default_action\": \"DECLINED\",\n        \"enabled\": true,\n        \"url\": \"https://example.com/remote-auth\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/issuing/config/update"
							},
							"response": []
						}
					],
					"id": "9b10c039-7af7-4378-9bff-ce90bdc42d1b"
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Get transactions",
							"id": "b3194898-e16a-4622-94f1-9c250578b1a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"transactions"
									],
									"query": [
										{
											"key": "billing_currency",
											"value": "",
											"description": "Currency in which transaction was billed. (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "card_id",
											"value": "",
											"description": "Unique Identifier for card",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-25T14:20:23.375+0800",
											"description": "start of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page",
											"disabled": true
										},
										{
											"key": "retrieval_ref",
											"value": "",
											"description": "Retrieval reference number",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-26",
											"description": "end of Transaction Date in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "transaction_type",
											"value": "",
											"description": "Transaction Type - one of AUTHORIZATION, CLEARING, REFUND, REVERSAL, ORIGINAL_CREDIT\nAUTHORIZATION - Funds reserved due to card usage\nCLEARING - Deducting purchase amount from account balance\nREFUND - Refunding the purchase amount back to account balance\nREVERSAL - Reversing an authorization\nORIGINAL_CREDIT - Merchant initiated credit transactions",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get single transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let issuing_transaction_id = pm.environment.get(\"issuing_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof issuing_transaction_id === \"undefined\" || issuing_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/issuing/transactions\";",
											"    console.warn(`Environment variable 'issuing_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items !== undefined && res.json().items.length > 0) {",
											"            console.info(`Defaulting 'issuing_transaction_id' to the first authorization ${res.json().items[0].transaction_id}`);",
											"            pm.variables.set(\"issuing_transaction_id\", res.json().items[0].transaction_id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'issuing_transaction_id' is not set, and cannot set a default, as there is no transaction returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "ba345fca-4fc1-458c-9dd6-01a46f19a98d"
									}
								}
							],
							"id": "0dd50029-9e35-4fa5-98d6-706d5c24a75a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/issuing/transactions/:issuing_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"issuing",
										"transactions",
										":issuing_transaction_id"
									],
									"variable": [
										{
											"id": "98ae589d-fc79-4dbe-92f3-90770c3b0de3",
											"key": "issuing_transaction_id",
											"value": "{{issuing_transaction_id}}",
											"description": "(Required) Unique Identifier for transaction"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "051f288d-034a-487d-91c3-3252f2f85ec3"
				}
			],
			"id": "45595560-e137-4541-ae8a-46153a2fe0a7"
		},
		{
			"name": "Online Payments",
			"item": [
				{
					"name": "Config",
					"item": [
						{
							"name": "Retrieve available payment method types",
							"id": "e9ea77ea-58f4-4a30-8d66-ec85283a1e2f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/pa/config/payment_method_types?active=true&country_code=CN&transaction_currency=CNY&transaction_mode=oneoff",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"config",
										"payment_method_types"
									],
									"query": [
										{
											"key": "active",
											"value": "true",
											"description": "Indicate whether the payment method type is active"
										},
										{
											"key": "country_code",
											"value": "CN",
											"description": "The supported country code."
										},
										{
											"key": "transaction_currency",
											"value": "CNY",
											"description": "The supported transaction currency. transaction_currency is required when country_code is given."
										},
										{
											"key": "transaction_mode",
											"value": "oneoff",
											"description": "The supported transaction mode. One of oneoff, recurring."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve bank names for certain payment method types",
							"id": "39386341-1ef7-4b99-86eb-d64095b3c002",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/pa/config/banks?payment_method_type=bank_transfer&country_code=MY",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"config",
										"banks"
									],
									"query": [
										{
											"key": "payment_method_type",
											"value": "bank_transfer",
											"description": "The payment method type to find the available banks. One of fpx, bank_transfer, online_banking. For other payment methods that does not require bank_name, an empty list will be returned."
										},
										{
											"key": "country_code",
											"value": "MY",
											"description": "Country code to filter the available banks. Use the two-character ISO Standard Country Codes.\n\nFor payment method type like online_banking and bank_transfer, the available bank list differs in different countries and country_code is needed to get the bank list.\n\nFor other payment method types, country_code will be ignored."
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0c995909-483a-4e61-90a2-cc27c4b2a4f4"
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "Create a Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"customer_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "340e5223-2fce-4747-ae1c-cfb86186d4cd"
									}
								}
							],
							"id": "f6568300-d488-4530-9938-69a9c40e9aff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"merchant_customer_id\": \"merchant_{{$guid}}\",\n    \"first_name\": \"{{$randomFirstName}}\",\n    \"last_name\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"phone_number\": \"{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/customers/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a Customer",
							"id": "6800dd96-0807-427b-8259-b5d7970cfa8c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id"
									],
									"variable": [
										{
											"id": "7444d3fa-0614-4a8f-89f6-190813e5ac6b",
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: BASE_URL + \"/api/v1/pa/customers/\" + pm.variables.get(\"customer_id\"),",
											"    method: \"GET\",",
											"    header: UTILITY.getRequestHeader()",
											"}, function (err, res) {",
											"    pm.variables.set(\"merchant_customer_id\", res.json().merchant_customer_id);",
											"});"
										],
										"type": "text/javascript",
										"id": "953baa28-d3dd-4d04-b993-c52d60958f2d"
									}
								}
							],
							"id": "16b031e1-8102-4804-b394-ce444b955b09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"merchant_customer_id\": \"{{merchant_customer_id}}\",\n    \"first_name\": \"{{$randomFirstName}}\",\n    \"last_name\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"phone_number\": \"{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"update"
									],
									"variable": [
										{
											"id": "58fe8687-b3a0-4fe4-933e-86ab58735659",
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate a client secret for a Customer",
							"id": "8626f0db-8b0c-418b-a756-084d16d6b737",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/generate_client_secret",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"generate_client_secret"
									],
									"variable": [
										{
											"id": "834d813b-9fef-458a-933a-f8d6cbcc39f6",
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add PaymentMethod to Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_method_id = pm.environment.get(\"payment_method_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_method_id === \"undefined\" || payment_method_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_methods\";",
											"    console.warn(`Environment variable 'payment_method_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        active_payment_method = res.json().items !== undefined ? res.json().items.find((x) => x.status !== \"DISABLED\") : undefined;",
											"        if (active_payment_method !== undefined) {",
											"            console.info(`Defaulting 'payment_method_id' to the first ACTIVE payment method ${active_payment_method.id}`);",
											"            pm.variables.set(\"payment_method_id\", active_payment_method.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_method_id' is not set, and cannot set a default, as there is no ACTIVE payment method returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "3ecc76db-ccc0-4572-84fe-dbb6f8062762"
									}
								}
							],
							"id": "fa37d1d5-64ea-40af-b0eb-405bb767070f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method_id\": \"{{payment_method_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/add_payment_method",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"add_payment_method"
									],
									"variable": [
										{
											"id": "de93a2b0-6c9b-40e0-8c36-c332c38d6940",
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove PaymentMethod from Customer",
							"id": "a3935401-3838-4f38-b1d1-244f681f02d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method_id\": \"{{payment_method_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/customers/:customer_id/remove_payment_method",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers",
										":customer_id",
										"remove_payment_method"
									],
									"variable": [
										{
											"id": "5e42446f-055c-48c4-836d-52e3a5a4c5ef",
											"key": "customer_id",
											"value": "{{customer_id}}",
											"description": "(Required) Customer ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of Customers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "650fe7a6-2591-420f-a57d-213d33d964b3"
									}
								}
							],
							"id": "f0a22fb8-b326-4b54-be8b-c39d5675ec84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/customers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"customers"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_customer_id",
											"value": "",
											"description": "The customer ID on merchant side",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Customers to be listed per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "065d33ec-2141-48a4-a543-8eb836b22c16",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":customer_id\"))",
									"    return;",
									"",
									"let customer_id = pm.environment.get(\"customer_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof customer_id === \"undefined\" || customer_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/customers\";",
									"    console.warn(`Environment variable 'customer_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'customer_id' to the first customer ${res.json().items[0].id}`);",
									"            pm.variables.set(\"customer_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'customer_id' is not set, and cannot set a default, as there is no customer returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "90f98e48-6ce0-46bf-b2b7-b52563d334aa"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3a62c528-f173-4a00-907f-8d4dfd8e37cb"
							}
						}
					]
				},
				{
					"name": "Customs Declarations",
					"item": [
						{
							"name": "Create a customs declaration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?currency=CNY&status=SUCCEEDED\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no SUCCESS CNY payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "262ffebf-e03e-4b91-83e3-f7dac69d11e3"
									}
								}
							],
							"id": "6d5f9980-be90-46d2-a537-10508742ca49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_intent_id\": \"{{payment_intent_id}}\",\n    \"customs_details\": {\n        \"customs_code\": \"GUANGZHOU_ZS\",\n        \"merchant_customs_name\": \"{{$randomCompanyName}}\",\n        \"merchant_customs_number\": \"{{$randomInt}}\"\n    },\n    \"shopper_details\": {\n        \"shopper_id\": \"310101200001010000\",\n        \"shopper_name\": \"{{$randomFullName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/customs_declarations/create"
							},
							"response": []
						}
					],
					"id": "fa796915-dba1-4aa5-a557-0ad892c35d66"
				},
				{
					"name": "Fund Splits",
					"item": [
						{
							"name": "Create a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"            pm.variables.set(\"fund_split_amount\", res.json().items[0].amount / 2);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no payment intent returned.\");",
											"        }",
											"    });",
											"}",
											"else {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents/\" + payment_intent_id;",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().amount !== undefined) {",
											"            pm.variables.set(\"fund_split_amount\", res.json().amount / 2);",
											"        }",
											"        else {",
											"            throw new Error(`No payment intent found for the payment_intent_id '${payment_intent_id}'.`);",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "84713972-2195-4598-a72b-61164a7b4cd9"
									}
								}
							],
							"id": "98b6f3b7-c97a-408b-bc79-bbc2b669fd0c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"source_id\": \"{{payment_intent_id}}\",\n    \"source_type\": \"PAYMENT_INTENT\",\n    \"amount\": {{fund_split_amount}},\n    \"destination\": \"{{connected_account_id}}\",\n    \"auto_release\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/funds_splits/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let fund_split_id = pm.environment.get(\"fund_split_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof fund_split_id === \"undefined\" || fund_split_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/funds_splits\";",
											"    console.warn(`Environment variable 'fund_split_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'fund_split_id' to the first fund split ${res.json().items[0].id}`);",
											"            pm.variables.set(\"fund_split_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'fund_split_id' is not set, and cannot set a default, as there is no fund split returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "1fb3a63d-1a8a-4168-b864-5add160c1736"
									}
								}
							],
							"id": "ecd80aa6-4cd0-4a03-a65a-a2ddd3cc507d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits/:fund_split_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits",
										":fund_split_id"
									],
									"variable": [
										{
											"id": "98e3b9b8-4a46-4730-a06c-5f61f849b298",
											"key": "fund_split_id",
											"value": "{{fund_split_id}}",
											"description": "(Required) FundsSplit Id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of FundsSplits",
							"id": "c02768f2-d805-432f-bed3-a3980dc3705e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits"
									],
									"query": [
										{
											"key": "page_number",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Fund Splits to be listed per page",
											"disabled": true
										},
										{
											"key": "source_id",
											"value": "",
											"description": "ID of which source this split would be created from. Currently only payment_intent_id is supported.",
											"disabled": true
										},
										{
											"key": "source_type",
											"value": "",
											"description": "Type of the source for this split. Currently only PAYMENT_INTENT is supported",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Release a FundsSplit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let fund_split_id = pm.environment.get(\"fund_split_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof fund_split_id === \"undefined\" || fund_split_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/funds_splits\";",
											"    console.warn(`Environment variable 'fund_split_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        fund_split = res.json().items !== undefined ? res.json().items.find((x) => x.status === \"CREATED\") : undefined;",
											"        if (fund_split !== undefined) {",
											"            console.info(`Defaulting 'fund_split_id' to the first CREATED fund split ${fund_split.id}`);",
											"            pm.variables.set(\"fund_split_id\", fund_split.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'fund_split_id' is not set, and cannot set a default, as there is no fund split returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "389dfe65-1943-4a06-ad36-945855489330"
									}
								}
							],
							"id": "8f908fbc-0f6e-4606-a6c2-5160fc8712cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/funds_splits/:fund_split_id/release",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"funds_splits",
										":fund_split_id",
										"release"
									],
									"variable": [
										{
											"id": "6aa8f3fb-f517-4ca8-a810-bddbd050ee21",
											"key": "fund_split_id",
											"value": "{{fund_split_id}}",
											"description": "(Required) FundsSplit Id"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dd5d7bd0-7d3c-4815-a163-a807174430ee"
				},
				{
					"name": "Payment Attempts",
					"item": [
						{
							"name": "Retrieve a PaymentAttempt by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_attempt_id = pm.environment.get(\"payment_attempt_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_attempt_id === \"undefined\" || payment_attempt_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_attempts\";",
											"    console.warn(`Environment variable 'payment_attempt_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_attempt_id' to the first payment attempt ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_attempt_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_attempt_id' is not set, and cannot set a default, as there is no payment attempt returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "78bb32cf-5993-4f71-8892-f7fbba9732e8"
									}
								}
							],
							"id": "c61c4dc2-5694-4f53-ae77-6195f845a66d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_attempts/:payment_attempt_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_attempts",
										":payment_attempt_id"
									],
									"variable": [
										{
											"id": "7d3a61ce-ba74-4945-a64d-417acb83300b",
											"key": "payment_attempt_id",
											"value": "{{payment_attempt_id}}",
											"description": "(Required) PaymentAttempt ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve list of PaymentAttempts",
							"id": "ee8ade97-8206-4450-a1c3-1741cde0a389",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_attempts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_attempts"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "PaymentAttempt currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentAttempts to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_intent_id",
											"value": "",
											"description": "PaymentIntent ID of the attempt",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "PaymentAttempt status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "db3beaa6-8cd3-427b-9439-59c22f9a9a17"
				},
				{
					"name": "Payment Consents",
					"item": [
						{
							"name": "Create a PaymentConsent - MIT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let customer_id = pm.environment.get(\"customer_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof customer_id === \"undefined\" || customer_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/customers\";",
											"    console.warn(`Environment variable 'customer_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'customer_id' to the first customer ${res.json().items[0].id}`);",
											"            pm.variables.set(\"customer_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'customer_id' is not set, and cannot set a default, as there is no customer returned.\");",
											"        }",
											"    });",
											"}",
											"",
											"let payment_method_id = pm.environment.get(\"payment_method_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_method_id === \"undefined\" || payment_method_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_methods?type=card\";",
											"    console.warn(`Environment variable 'payment_method_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        payment_method = res.json().items !== undefined ? res.json().items.find((x) => x.status !== \"DISABLED\") : undefined;",
											"        if (payment_method !== undefined) {",
											"            console.info(`Defaulting 'payment_method_id' to the first ACTIVE CARD payment method ${payment_method.id}`);",
											"            pm.variables.set(\"payment_method_id\", payment_method.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_method_id' is not set, and cannot set a default, as there is no ACTIVE CARD payment method returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "18354410-5d24-47f8-b3c2-6008f53d094d"
									}
								}
							],
							"id": "d314be6f-da95-48fa-8ef4-2d60c27cc50f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"payment_method\": {\n        \"id\": \"{{payment_method_id}}\",\n        \"type\": \"card\"\n    },\n    \"next_triggered_by\": \"merchant\",\n    \"merchant_trigger_reason\": \"scheduled\",\n    \"connected_account_id\": \"{{connected_account_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/payment_consents/create"
							},
							"response": []
						},
						{
							"name": "Get list of PaymentConsents",
							"id": "3e561eab-dce1-42bd-bfda-69592a4e14f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_consents",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_consents"
									],
									"query": [
										{
											"key": "customer_id",
											"value": "",
											"type": "text",
											"description": "The unique identifier of a customer",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"type": "text",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_trigger_reason",
											"value": "",
											"type": "text",
											"description": "One of scheduled, unscheduled",
											"disabled": true
										},
										{
											"key": "next_triggered_by",
											"value": "",
											"type": "text",
											"description": "One of merchant, customer",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"type": "text",
											"description": "Status of PaymentConsent",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"type": "text",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"type": "text",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"type": "text",
											"description": "Number of PaymentConsents to be listed per page. Default: 10",
											"disabled": true
										},
										{
											"key": "purpose",
											"value": "",
											"type": "text",
											"description": "The purpose of the PaymentConsent. one of recurring and one_off",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2d8f0d66-bcc9-49fa-9e0a-b1754fbf53ff"
				},
				{
					"name": "Payment Intents",
					"item": [
						{
							"name": "Create a PaymentIntent - MVP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"payment_intent_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "138d6a98-2dcf-4434-bc81-fdceb5df317d"
									}
								}
							],
							"id": "3323d57f-9d28-4775-8b9a-d84803ce4f35",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": {{$randomInt}},\n    \"currency\": \"CNY\",\n    \"merchant_order_id\": \"Merchant_Order_{{$guid}}\",\n    \"return_url\": \"{{$randomUrl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/payment_intents/create"
							},
							"response": []
						},
						{
							"name": "Create a PaymentIntent - With More Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"payment_intent_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "5263fe9b-1db4-495e-941f-17b32560720c"
									}
								}
							],
							"id": "0911ca74-b883-4d38-9adc-eba1eccdb8af",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": 100,\n    \"currency\": \"CNY\",\n    \"merchant_order_id\": \"Merchant_Order_{{$guid}}\",\n    \"metadata\": {\n        \"my_test_metadata_id\": \"my_test_metadata_id_{{$guid}}\"\n    },\n    \"order\": {\n        \"products\": [\n            {\n                \"code\": \"3414314111\",\n                \"desc\": \"iPhone\",\n                \"name\": \"iPhone\",\n                \"quantity\": 1,\n                \"sku\": \"iPhone_001\",\n                \"type\": \"Mobile Phone - iPhone\",\n                \"unit_price\": 1499.99,\n                \"url\": \"{{$randomUrl}}\"\n            }\n        ],\n        \"shipping\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"CN\",\n                \"postcode\": \"25000\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\",\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\n            \"shipping_method\": \"顺丰快递\"\n        },\n        \"type\": \"Online Mobile Phone Purchases\"\n    },\n    \"payment_method_options\": {\n        \"card\": {\n            \"risk_control\": {\n                \"skip_risk_processing\": false,\n                \"three_domain_secure_action\": \"FORCE_3DS\",\n                \"three_ds_action\": \"FORCE_3DS\"\n            }\n        }\n    },\n    \"return_url\": \"{{$randomUrl}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/payment_intents/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "679a78c0-8879-4ca7-a338-c92098dfe4d8"
									}
								}
							],
							"id": "d68b94ce-4f9d-4e39-bb01-1958afb9ac54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id"
									],
									"variable": [
										{
											"id": "2f39d22b-acb7-413f-846c-a3a86041368a",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - payment_method = card",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "45787b67-2e44-4951-b286-7931eed5e72d"
									}
								}
							],
							"id": "c789334d-f0f1-40e9-b9ec-7a8a4c0be499",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"4111111111111111\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"id": "095e1909-fe84-42f8-a44b-0fb47c60ef78",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - auto_capture = false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "237d1a0b-fe5e-46aa-b9b0-240f65530c6e"
									}
								}
							],
							"id": "05ea5481-af79-4799-8512-a6f0513539b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"4111111111111111\"\n        }\n    },\n    \"payment_method_options\": {\n        \"card\": {\n            \"auto_capture\": false\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"id": "b4f4797e-92a0-4f08-9f91-c8f1c7837622",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm a PaymentIntent - Trigger Netcetera 3DS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_PAYMENT_METHOD\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_PAYMENT_METHOD payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_PAYMENT_METHOD payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "a59c515a-2bbd-4f3e-8159-530f5bf22a84"
									}
								}
							],
							"id": "ac19b57f-3bb2-4467-bb6f-ce8c77f9081d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_method\": {\n        \"type\": \"card\",\n        \"card\": {\n            \"billing\": {\n                \"address\": {\n                    \"city\": \"{{$randomCity}}\",\n                    \"country_code\": \"US\",\n                    \"postcode\": \"25000\",\n                    \"state\": \"{{$randomCity}}\",\n                    \"street\": \"{{$randomStreetAddress}}\"\n                },\n                \"first_name\": \"{{$randomFirstName}}\",\n                \"last_name\": \"{{$randomLastName}}\"\n            },\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"2030\",\n            \"number\": \"5424184049821670\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm"
									],
									"variable": [
										{
											"id": "a2efc357-1e73-47c3-bad1-fdfbb49efb0a",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Continue to confirm a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_CUSTOMER_ACTION\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_CUSTOMER_ACTION payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_CUSTOMER_ACTION payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "132d148b-66d3-4446-a871-8e3aa6616a04"
									}
								}
							],
							"id": "585ee4f5-235d-446e-976d-afb7d7a08143",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"dcc\",\n    \"use_dcc\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/confirm_continue",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"confirm_continue"
									],
									"variable": [
										{
											"id": "ed3e8897-997d-4d8f-aefe-1ed89a9f0436",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Capture a PaymentIntent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=REQUIRES_CAPTURE\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first REQUIRES_CAPTURE payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"            pm.variables.set(\"payment_intent_amount\", res.json().items[0].amount);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no REQUIRES_CAPTURE payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "4534b94a-17f4-4ba2-bced-935aabac8396"
									}
								}
							],
							"id": "261a7c7a-2adc-4331-a6ce-6aaf84dc178e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"amount\": \"{{payment_intent_amount}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents/:payment_intent_id/capture",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents",
										":payment_intent_id",
										"capture"
									],
									"variable": [
										{
											"id": "caccfdaf-4f79-4173-bb47-d8291f87d8dd",
											"key": "payment_intent_id",
											"value": "{{payment_intent_id}}",
											"description": "(Required) PaymentIntent ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of PaymentIntents",
							"id": "0c6eaec4-9361-4ed0-a01a-937ec68f5cae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_intents",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_intents"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "PaymentIntent currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "merchant_order_id",
											"value": "",
											"description": "Merchant Order ID",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentIntents to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_consent_id",
											"value": "",
											"description": "Payment Consent ID",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "PaymentIntent status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2364b0fc-cb9c-408f-b532-b2994cb18b6c",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "8144be73-498b-4485-ae47-9330d0ca85c5"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "441e6b8c-28e3-4973-91e4-385057954de4"
							}
						}
					]
				},
				{
					"name": "Payment Links",
					"item": [],
					"id": "e3f4a0f4-2cfe-40f4-b292-ff6b3c996316"
				},
				{
					"name": "Payment Methods",
					"item": [
						{
							"name": "Create a PaymentMethod",
							"id": "1c954adc-1491-4468-9465-4c2ef6006bd1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"card\",\n    \"card\": {\n        \"billing\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"CN\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\"\n        },\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"2030\",\n        \"number\": \"4111111111111111\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/payment_methods/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a PaymentMethod",
							"id": "e4448812-d2f6-4ca5-ab89-cf3370035d33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id"
									],
									"variable": [
										{
											"id": "c315d23d-cbf8-4365-9312-63c313139537",
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a PaymentMethod",
							"id": "de84875c-64dc-486d-a9a6-566061422c91",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"type\": \"card\",\n    \"card\": {\n        \"billing\": {\n            \"address\": {\n                \"city\": \"{{$randomCity}}\",\n                \"country_code\": \"CN\",\n                \"state\": \"{{$randomCity}}\",\n                \"street\": \"{{$randomStreetAddress}}\"\n            },\n            \"first_name\": \"{{$randomFirstName}}\",\n            \"last_name\": \"{{$randomLastName}}\"\n        },\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"2030\",\n        \"number\": \"4111111111111111\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id",
										"update"
									],
									"variable": [
										{
											"id": "09c440ae-2418-409f-8181-f68e8c32aaef",
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of PaymentMethods",
							"id": "462147f6-4574-451b-8e45-2c0d8dbf9d75",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods"
									],
									"query": [
										{
											"key": "customer_id",
											"value": "",
											"description": "Customer ID of the PaymentMethods",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of PaymentMethods to be listed per page",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"description": "PaymentMethod type",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable a PaymentMethod",
							"id": "5523de3a-7976-42dc-81eb-1cb722ff1cce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/pa/payment_methods/:payment_method_id/disable",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"payment_methods",
										":payment_method_id",
										"disable"
									],
									"variable": [
										{
											"id": "f0e3a4ad-5401-4863-a499-bb6a29da8e8d",
											"key": "payment_method_id",
											"value": "{{payment_method_id}}",
											"description": "(Required) PaymentMethod ID"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cefceb80-ba44-41c6-b9bb-ca85e416cf53",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":payment_method_id\"))",
									"    return;",
									"",
									"let payment_method_id = pm.environment.get(\"payment_method_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof payment_method_id === \"undefined\" || payment_method_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/payment_methods\";",
									"    console.warn(`Environment variable 'payment_method_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        active_payment_method = res.json().items !== undefined ? res.json().items.find((x) => x.status !== \"DISABLED\") : undefined;",
									"        if (active_payment_method !== undefined) {",
									"            console.info(`Defaulting 'payment_method_id' to the first ACTIVE payment method ${active_payment_method.id}`);",
									"            pm.variables.set(\"payment_method_id\", active_payment_method.id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'payment_method_id' is not set, and cannot set a default, as there is no ACTIVE payment method returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "61cd5796-79d3-43cb-8c54-bd90d3212f52"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c6569e77-995e-40e7-9484-3e53358be79c"
							}
						}
					]
				},
				{
					"name": "Quote",
					"item": [
						{
							"name": "Create a Quote",
							"id": "42ef20e7-5c96-497e-a09d-68d5244c538e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"mcp\",\n    \"payment_currency\": \"{{$randomCurrencyCode}}\",\n    \"settlement_currency\": \"{{$randomCurrencyCode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/quotes/create"
							},
							"response": []
						},
						{
							"name": "Get list of Quotes",
							"id": "83cd72cf-3ada-4829-b3e9-9168a63d3396",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/quotes",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"quotes"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of from_created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of historic quotes to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_currency",
											"value": "",
											"description": "Currency that the consumer pays (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "settlement_currency",
											"value": "",
											"description": "Currency that the merchant will receive (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of to_created_at in ISO8601 format (exclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b0ddcc89-cc2e-4cf6-8647-8781c4df42d1"
				},
				{
					"name": "Refunds",
					"item": [
						{
							"name": "Create a Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let payment_intent_id = pm.environment.get(\"payment_intent_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof payment_intent_id === \"undefined\" || payment_intent_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/payment_intents?status=SUCCEEDED\";",
											"    console.warn(`Environment variable 'payment_intent_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'payment_intent_id' to the first payment intent ${res.json().items[0].id}`);",
											"            pm.variables.set(\"payment_intent_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'payment_intent_id' is not set, and cannot set a default, as there is no SUCCESS payment intent returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "02ce32d6-7f30-4462-aed7-f82ce2dc0912"
									}
								}
							],
							"id": "2865155f-2f65-4597-848f-b605b682ab90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\",\n    \"payment_intent_id\": \"{{payment_intent_id}}\",\n    \"reason\": \"Postman Test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/pa/refunds/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a Refund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let refund_id = pm.environment.get(\"refund_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof refund_id === \"undefined\" || refund_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/pa/refunds\";",
											"    console.warn(`Environment variable 'refund_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'refund_id' to the first refund ${res.json().items[0].id}`);",
											"            pm.variables.set(\"refund_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'refund_id' is not set, and cannot set a default, as there is no refund returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "eb3a574b-3174-4e32-b62d-9cee574bd521"
									}
								}
							],
							"id": "02605e7b-6af5-4bc5-8642-efa8da7db67e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/refunds/:refund_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"refunds",
										":refund_id"
									],
									"variable": [
										{
											"id": "5761fb6d-456c-4454-ae9c-982a5c9edcc9",
											"key": "refund_id",
											"value": "{{refund_id}}",
											"description": "(Required) Refund ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of Refunds",
							"id": "47167037-2554-4b8c-81e9-f9523576fd04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/refunds",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"refunds"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Refund currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start time of created_at in ISO8601 format",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number starting from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of Refunds to be listed per page",
											"disabled": true
										},
										{
											"key": "payment_attempt_id",
											"value": "",
											"description": "PaymentAttempt ID of the Refunds",
											"disabled": true
										},
										{
											"key": "payment_intent_id",
											"value": "",
											"description": "PaymentIntent ID of the Refunds",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Refund status",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end time of created_at in ISO8601 format",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "bc2e550a-f888-4eb9-9d9d-043875e39381",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "20eb1813-09d0-494c-aff5-c4c282519995"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "4d1d472a-21f5-49bd-89ac-2edb452c5733"
							}
						}
					]
				}
			],
			"id": "f4611599-8faf-4b70-adbd-c321dc55a388"
		},
		{
			"name": "Payouts",
			"item": [
				{
					"name": "Beneficiaries",
					"item": [
						{
							"name": "Get list of beneficiaries",
							"id": "4eec95aa-a919-42cf-955c-7e69dc69ddcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries"
									],
									"query": [
										{
											"key": "bank_account_number",
											"value": "",
											"description": "Filter on bank account number of beneficiary",
											"disabled": true
										},
										{
											"key": "company_name",
											"value": "",
											"description": "Filter on company name of beneficiary",
											"disabled": true
										},
										{
											"key": "entity_type",
											"value": "",
											"description": "Filter on entity type of COMPANY or PERSONAL",
											"disabled": true
										},
										{
											"key": "from_date",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "name",
											"value": "",
											"description": "Filter on name of beneficiary",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Filter on nickname of beneficiary",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_date",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a beneficiary by ID",
							"id": "7638c525-ef31-444e-8ee3-e75c30295c2f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/:beneficiary_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										":beneficiary_id"
									],
									"variable": [
										{
											"id": "9a01419c-7fc2-41bf-8294-a77c50f5f28c",
											"key": "beneficiary_id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new beneficiary",
							"id": "d64ee96e-4095-4f4a-9652-aa166c22aade",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/beneficiaries/create"
							},
							"response": []
						},
						{
							"name": "Delete existing beneficiary",
							"id": "069e50b0-c99a-4d54-acf6-4820171997fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/delete/:beneficiary_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										"delete",
										":beneficiary_id"
									],
									"variable": [
										{
											"id": "9234b3f1-b9ba-42dc-a191-40cbf4c743ce",
											"key": "beneficiary_id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update existing beneficiary",
							"id": "ae9a8ee1-1ba1-451d-b388-55a99916a3a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/beneficiaries/update/:beneficiary_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"beneficiaries",
										"update",
										":beneficiary_id"
									],
									"variable": [
										{
											"id": "f7bcbdc1-087a-433b-973a-34eaaa2052a8",
											"key": "beneficiary_id",
											"value": "{{beneficiary_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate beneficiary",
							"id": "439b18c7-aa5a-4a17-925b-d90f2ad4c78b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"US\",\n            \"postcode\": \"{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"USD\",\n            \"account_name\": \"{{$randomCompanyName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"US\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"CHASUS33\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_methods\": [\n        \"SWIFT\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/beneficiaries/validate"
							},
							"response": []
						},
						{
							"name": "Get the API schema",
							"id": "f21e14be-29a1-452d-8477-3030d6d5e2b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_currency\": \"CNY\",\n    \"bank_country_code\": \"CN\",\n    \"entity_type\": \"COMPANY\",\n    \"local_clearing_system\": null,\n    \"payment_method\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/beneficiary_api_schemas/generate"
							},
							"response": []
						},
						{
							"name": "Get the form schema",
							"id": "4308b31c-f16f-4eb4-94c7-705cb73f762a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_currency\": \"HKD\",\n    \"bank_country_code\": \"HK\",\n    \"entity_type\": \"COMPANY\",\n    \"payment_method\": \"LOCAL\",\n    \"local_clearing_system\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/beneficiary_form_schemas/generate"
							},
							"response": []
						}
					],
					"id": "cd00486a-eba8-48cd-b1b4-b6efc4e56ddb",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":beneficiary_id\"))",
									"    return;",
									"",
									"let beneficiary_id = pm.environment.get(\"beneficiary_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof beneficiary_id === \"undefined\" || beneficiary_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/beneficiaries\";",
									"    console.warn(`Environment variable 'beneficiary_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'beneficiary_id' to the first beneficiary ${res.json().items[0].beneficiary_id}`);",
									"            pm.variables.set(\"beneficiary_id\", res.json().items[0].beneficiary_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'beneficiary_id' is not set, and cannot set a default, as there is no beneficiary returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "ef2e6255-f497-4379-afae-802ba757c984"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3b2cfca1-8f14-428c-ba89-ef9551bba4dc"
							}
						}
					]
				},
				{
					"name": "Payers",
					"item": [
						{
							"name": "Get list of payers",
							"id": "306f6783-5643-4435-948e-463bb8d70c8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers"
									],
									"query": [
										{
											"key": "entity_type",
											"value": "",
											"description": "Filter on entity type of COMPANY or PERSONAL",
											"disabled": true
										},
										{
											"key": "from_date",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "name",
											"value": "",
											"description": "Filter on name of payer",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "Filter on nickname of payer",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_date",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a payer by ID",
							"id": "1d4e58c5-0a32-4697-b47a-f4e4a0bed3d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers/:payer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										":payer_id"
									],
									"variable": [
										{
											"id": "fe5a60d6-3ec7-47ed-b789-2d09c53f78e6",
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new payer",
							"id": "9c8b2de9-e163-4e16-8c04-e056917b7d2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n};",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/payers/create"
							},
							"response": []
						},
						{
							"name": "Update existing payer",
							"id": "dada1e9c-92dc-4aa8-a72e-03e0ec8df744",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n};",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payers/update/:payer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										"update",
										":payer_id"
									],
									"variable": [
										{
											"id": "4fe470ef-266f-411f-b47a-bdc18b8ce571",
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete existing payer",
							"id": "5b0355b6-d56d-4bb4-a3d7-0ec09e39de9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payers/delete/:payer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payers",
										"delete",
										":payer_id"
									],
									"variable": [
										{
											"id": "813ae9f2-f72c-4d93-9ec5-72f278c963f3",
											"key": "payer_id",
											"value": "{{payer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate payer",
							"id": "3ab3eabc-1fa6-420c-bfd0-df703971691f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"payer\": {\n        \"additional_info\": {\n            \"business_registration_number\": \"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomInt}}{{$randomInt}}\"\n        },\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"{{$randomInt}}{{$randomInt}}\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    }\n};",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/payers/validate"
							},
							"response": []
						}
					],
					"id": "b616f056-40ec-442a-8291-d27bee8ddece",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":payer_id\"))",
									"    return;",
									"",
									"let payer_id = pm.environment.get(\"payer_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof payer_id === \"undefined\" || payer_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/payers\";",
									"    console.warn(`Environment variable 'payer_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'payer_id' to the first payer ${res.json().items[0].payer_id}`);",
									"            pm.variables.set(\"payer_id\", res.json().items[0].payer_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'payer_id' is not set, and cannot set a default, as there is no payer returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "664f6403-c2b7-4885-bc2e-d40c33e44cf8"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ffe539ba-e286-440f-b13d-77a456f6581b"
							}
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Get list of payments",
							"id": "5e3ef869-b9af-4bb5-82f1-fd48f5c80727",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payments",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payments"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page, defaultValue 2000",
											"disabled": true
										},
										{
											"key": "payment_currency",
											"value": "HKD",
											"description": "Payment currency",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "ca62b786-1137-45dd-ab94-b5adcb536a12",
											"description": "Payment request_id",
											"disabled": true
										},
										{
											"key": "short_reference_id",
											"value": "P211220-633K36F",
											"description": "Payment short_reference_id",
											"disabled": true
										},
										{
											"key": "status",
											"value": "CANCELLED",
											"description": "Status of the payment",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payment by ID",
							"id": "6b3fec58-9f20-4493-acaf-f66a86f6177b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payments/:payment_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										":payment_id"
									],
									"variable": [
										{
											"id": "b2c4d777-72c6-4d0d-b740-e7e20a8ac8e9",
											"key": "payment_id",
											"value": "{{payment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel a payment",
							"id": "2156793b-336b-4777-9b46-45f1a5b4c5b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/payments/cancel/:payment_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										"cancel",
										":payment_id"
									],
									"variable": [
										{
											"id": "ac32b88c-ff8e-4cd5-ac9f-124dfa0e1981",
											"key": "payment_id",
											"value": "{{payment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new payment - to beneficiary",
							"id": "efde791e-fe6a-4267-b7bd-b0737d90aa0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"25000\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"CNY\",\n            \"account_name\": \"{{$randomFullName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"CN\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"ABOCCNBJ\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_amount\": 1000,\n    \"payment_currency\": \"CNY\",\n    \"payment_method\": \"SWIFT\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"USD\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/payments/create"
							},
							"response": []
						},
						{
							"name": "Create a new payment - to beneficiary_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let beneficiary_id = pm.environment.get(\"beneficiary_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof beneficiary_id === \"undefined\" || beneficiary_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/beneficiaries\";",
											"    console.warn(`Environment variable 'beneficiary_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'beneficiary_id' to the first beneficiary ${res.json().items[0].beneficiary_id}`);",
											"            pm.variables.set(\"beneficiary_id\", res.json().items[0].beneficiary_id);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().items[0].beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().items[0].beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_payment_method\", res.json().items[0].payment_methods[0]);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'beneficiary_id' is not set, and cannot set a default, as there is no beneficiary returned.\");",
											"        }",
											"    });",
											"}",
											"else {",
											"    request_url = BASE_URL + \"/api/v1/beneficiaries/\" + beneficiary_id;",
											"    console.warn(`Calling ${request_url} to default other payment variables.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().beneficiary !== undefined) {",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_account_currency\", res.json().beneficiary.bank_details.account_currency);",
											"            pm.variables.set(\"beneficiary_payment_method\", res.json().payment_methods[0]);",
											"        }",
											"        else {",
											"            throw new Error(`No beneficiary returned for the given beneficiary_id '${beneficiary_id}'.`);",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "5410a72e-c87b-4b7f-b584-578320ec2d63"
									}
								}
							],
							"id": "9b316b1d-e105-4850-9805-25a816780fb8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary_id\": \"{{beneficiary_id}}\",\n    \"payment_amount\": 1000,\n    \"payment_currency\": \"{{beneficiary_account_currency}}\",\n    \"payment_method\": \"{{beneficiary_payment_method}}\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"CNY\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/payments/create"
							},
							"response": []
						},
						{
							"name": "Retry a payment",
							"id": "5f7febfb-e1dd-4ece-a05a-dfbaad664c43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_name\": \"{{$randomFullName}}\",\n    \"bank_country_code\": \"CN\",\n    \"bank_name\": \"{{$randomCompanyName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payments/retry/:payment_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										"retry",
										":payment_id"
									],
									"variable": [
										{
											"id": "9a51509b-8bec-4fb4-993f-16ca2ac072bf",
											"key": "payment_id",
											"value": "{{payment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a payment",
							"id": "68e8a052-2e74-40d7-a138-679ab66541fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"25000\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"CNY\",\n            \"account_name\": \"{{$randomFullName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"CN\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"ABOCCNBJ\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_amount\": 1000,\n    \"payment_currency\": \"CNY\",\n    \"payment_method\": \"SWIFT\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"USD\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/payments/update/:payment_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"payments",
										"update",
										":payment_id"
									],
									"variable": [
										{
											"id": "8660a8eb-320d-46f2-9f5f-e5276b9f414b",
											"key": "payment_id",
											"value": "{{payment_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate payment",
							"id": "76cc6c6d-f3e3-4f51-ab36-e1bacf7d607c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiary\": {\n        \"address\": {\n            \"city\": \"{{$randomCity}}\",\n            \"country_code\": \"CN\",\n            \"postcode\": \"25000\",\n            \"state\": \"{{$randomCity}}\",\n            \"street_address\": \"{{$randomStreetAddress}}\"\n        },\n        \"bank_details\": {\n            \"account_currency\": \"CNY\",\n            \"account_name\": \"{{$randomFullName}}\",\n            \"account_number\": \"{{$randomBankAccount}}\",\n            \"bank_country_code\": \"CN\",\n            \"bank_name\": \"{{$randomCompanyName}}\",\n            \"swift_code\": \"ABOCCNBJ\"\n        },\n        \"company_name\": \"{{$randomCompanyName}}\",\n        \"entity_type\": \"COMPANY\"\n    },\n    \"payment_amount\": 1000,\n    \"payment_currency\": \"CNY\",\n    \"payment_method\": \"SWIFT\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Test {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source_amount\": null,\n    \"source_currency\": \"USD\",\n    \"swift_charge_option\": \"SHARED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/payments/validate"
							},
							"response": []
						}
					],
					"id": "0066c2e1-e19c-48ca-8b88-fea4a0e225fc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":payment_id\"))",
									"    return;",
									"",
									"let payment_id = pm.environment.get(\"payment_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof payment_id === \"undefined\" || payment_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/payments\";",
									"    console.warn(`Environment variable 'payment_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().length > 0) {",
									"            console.info(`Defaulting 'payment_id' to the first payment ${res.json()[0].payment_id}`);",
									"            pm.variables.set(\"payment_id\", res.json()[0].payment_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'payment_id' is not set, and cannot set a default, as there is no payment returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "2391905b-457e-4099-bf12-cc7ad8ce6a48"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0e087aec-6b25-441f-9b3f-7d2dd6ade470"
							}
						}
					]
				}
			],
			"id": "6f8a06b3-d7f4-44a9-bb65-59d8a29a5484"
		},
		{
			"name": "Reporting",
			"item": [
				{
					"name": "Financial Reports",
					"item": [
						{
							"name": "Get list of financial reports",
							"id": "b442d9a3-0a3a-40ed-9737-59cdd2c232c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{url}}/api/v1/finance/financial_reports"
							},
							"response": []
						},
						{
							"name": "Get financial report by ID",
							"id": "f935af2f-840b-4f93-a7eb-b30e1eb9d98b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports/:report_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports",
										":report_id"
									],
									"variable": [
										{
											"id": "496e6d7b-87b5-43a3-9070-1708509f996f",
											"key": "report_id",
											"value": "{{report_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get contents of a financial report",
							"id": "b8dedcea-588f-43c6-8789-592b804f3941",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/finance/financial_reports/:report_id/content",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"finance",
										"financial_reports",
										":report_id",
										"content"
									],
									"variable": [
										{
											"id": "7d4ef68d-35d2-4068-860f-8841378c34de",
											"key": "report_id",
											"value": "{{report_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a financial report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a6d4886-9dab-4313-bef8-2992749aef29",
										"exec": [
											"pm.environment.set(\"report_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ba56995-2a1e-4ed5-873f-9d2a415d0672",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_format\": \"CSV\",\n    \"from_created_at\": \"2022-02-01\",\n    \"to_created_at\": \"2022-05-31\",\n    \"type\": \"BALANCE_ACTIVITY_REPORT\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/finance/financial_reports/create"
							},
							"response": []
						}
					],
					"id": "75504902-08d2-4927-98ec-800c150c4a5d"
				},
				{
					"name": "Financial Transactions",
					"item": [
						{
							"name": "Get list of financial transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "cc40e966-e8dc-45d5-be6e-3ed698bbb849"
									}
								}
							],
							"id": "53efacf7-1c01-418d-9b71-6406f767e900",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/financial_transactions?page_size=200&to_created_at=2022-01-25",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"financial_transactions"
									],
									"query": [
										{
											"key": "batch_id",
											"value": "",
											"description": "Batch ID of the financial transaction",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "2022-01-24",
											"description": "The start time of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "200",
											"description": "Number of results per page, default is 100, max is 1000"
										},
										{
											"key": "source_id",
											"value": "",
											"description": "The source ID of the transaction",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the financial transaction, one of: PENDING, SETTLED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2022-01-25",
											"description": "The end time of created_at in ISO8601 format (inclusive)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a financial transaction by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let financial_transaction_id = pm.environment.get(\"financial_transaction_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof financial_transaction_id === \"undefined\" || financial_transaction_id === \"\") {",
											"    request_url = BASE_URL + \"/api/v1/financial_transactions\";",
											"    console.warn(`Environment variable 'financial_transaction_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: UTILITY.getRequestHeader()",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'financial_transaction_id' to the first transaction ${res.json().items[0].id}`);",
											"            pm.variables.set(\"financial_transaction_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'financial_transaction_id' is not set, and cannot set a default, as there is no financial transaction returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "2da4b0ab-3aab-40e9-a395-83999b94f58c"
									}
								}
							],
							"id": "19418f44-d4ee-4530-8bd4-6fb5192d4edd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/financial_transactions/:financial_transaction_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"financial_transactions",
										":financial_transaction_id"
									],
									"variable": [
										{
											"id": "70cc68fa-f19e-4726-bf20-f73746ce598e",
											"key": "financial_transaction_id",
											"value": "{{financial_transaction_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "1fa8fd99-a756-4c00-8e14-21ecf803e049"
				},
				{
					"name": "Settlements",
					"item": [
						{
							"name": "Get list of settlements",
							"id": "7c1cb9fa-b21d-4a76-a762-4abb2975aba5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency of the settlement",
											"disabled": true
										},
										{
											"key": "from_settled_at",
											"value": "",
											"description": "The start date of settled_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page, default is 100, max is 1000",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the settlement, one of: PENDING, SETTLED",
											"disabled": true
										},
										{
											"key": "to_settled_at",
											"value": "",
											"description": "The end date of settled_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a settlement by ID",
							"id": "1d7bdc78-4045-4c78-858c-1ea2960ce156",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements/:settlement_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements",
										":settlement_id"
									],
									"variable": [
										{
											"id": "e50d3490-ca60-4a13-8b12-89f86bdf9fd2",
											"key": "settlement_id",
											"value": "{{settlement_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a settlement report by ID",
							"id": "87bc925a-5bc4-4ce7-ba2e-977729cb5441",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/pa/financial/settlements/:settlement_id/report",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"pa",
										"financial",
										"settlements",
										":settlement_id",
										"report"
									],
									"variable": [
										{
											"id": "72ef4927-a865-42d8-9fd0-68d32733562c",
											"key": "settlement_id",
											"value": "{{settlement_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "494407b6-ec43-45a2-917a-caf1edd5117e",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":settlement_id\"))",
									"    return;",
									"",
									"let settlement_id = pm.environment.get(\"settlement_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof settlement_id === \"undefined\" || settlement_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/pa/financial/settlements\";",
									"    console.warn(`Environment variable 'settlement_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().items.length > 0) {",
									"            console.info(`Defaulting 'settlement_id' to the first settlement ${res.json().items[0].id}`);",
									"            pm.variables.set(\"settlement_id\", res.json().items[0].id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'settlement_id' is not set, and cannot set a default, as there is no settlement returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "ce012fb1-4d2f-495a-ac0a-5413329af7ff"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2b29b44a-f930-4f58-8931-eb3ea0c9cca4"
							}
						}
					]
				}
			],
			"id": "eab9030c-e1db-4d84-a921-4fb600ff3239"
		},
		{
			"name": "Scale",
			"item": [
				{
					"name": "Account Links",
					"item": [
						{
							"name": "Create an account invitation link - oauth2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"invitation_link_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "33e90ac1-97b4-437d-ac31-4d0b91f789c0"
									}
								}
							],
							"id": "89255e92-9798-4fbb-9bf7-98b50b95d5db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\": \"external_account_id_{{$guid}}\",\n    \"metadata\": {},\n    \"mode\": \"oauth2\",\n    \"oauth2\": {\n        \"redirect_uri\": \"{{$randomUrl}}\",\n        \"response_type\": \"code\",\n        \"scope\": [\n            \"r:awx_action:balances_view\",\n            \"r:awx_action:settings.account_details_view\"\n        ],\n        \"state\": \"state-{{$guid}}\"\n    },\n    \"prefilled_formdata\": [\n        {\n            \"editable\": false,\n            \"field\": \"email\",\n            \"value\": \"test.{{$timestamp}}@example.com\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"business_name\",\n            \"value\": \"{{$randomCompanyName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"first_name\",\n            \"value\": \"{{$randomFirstName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"last_name\",\n            \"value\": \"{{$randomLastName}}\",\n            \"verified\": true\n        },\n        {\n            \"editable\": false,\n            \"field\": \"contact_name\",\n            \"value\": \"{{$randomFullName}}\",\n            \"verified\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/accounts/invitation_links/create"
							},
							"response": []
						},
						{
							"name": "Create an account invitation link - scale_connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"invitation_link_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "0b4695b4-10c2-482a-9ffd-4c522667fed7"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"request_url = BASE_URL + \"/api/v1/accounts/\" + pm.variables.get(\"connected_account_id\");",
											"",
											"pm.sendRequest({",
											"    url: request_url,",
											"    method: \"GET\",",
											"    header: { \"Authorization\": \"Bearer \" + pm.variables.get(\"bearer_token\") }",
											"}, function (err, res) {",
											"    if (res.json().primary_contact !== undefined) {",
											"        pm.variables.set(\"connected_account_email\", res.json().primary_contact.email);",
											"    }",
											"    else {",
											"        throw new Error(`Cannot retrieve account details for connected_account_id '${connected_account_id}'.`);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"id": "d9f8e55e-6d6f-4c83-9fe3-74110b8f1b3d"
									}
								}
							],
							"id": "f873a3a7-056c-4bfc-9564-c35f0ed93901",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": \"{{connected_account_id}}\",\n    \"mode\": \"scale_connect\",\n    \"prefilled_formdata\": [\n        {\n            \"editable\": false,\n            \"field\": \"email\",\n            \"value\": \"{{connected_account_email}}\",\n            \"verified\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/accounts/invitation_links/create"
							},
							"response": []
						},
						{
							"name": "Get an account invitation link by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "c480a4fa-3482-45a9-bdf8-e5abaaedee4f"
									}
								}
							],
							"id": "61fba7d0-0a0b-4b1f-a086-2e947226c15f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/invitation_links/:invitation_link_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										"invitation_links",
										":invitation_link_id"
									],
									"variable": [
										{
											"id": "99f8eec9-e1b8-4e96-9710-58c78819497d",
											"key": "invitation_link_id",
											"value": "{{invitation_link_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ce4a46e1-adc1-479e-b9bb-107fcf375355"
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Create an account - Business",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"connected_account_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "44d7d877-65d1-4cac-92fc-748f971fdaf6"
									}
								}
							],
							"id": "21260a5b-e616-4127-8ae5-17fb54b2748f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"beneficial_owners\": [\n            {\n                \"identification_type\": \"PERSONAL_ID\",\n                \"nationality\": \"CN\",\n                \"attachments\": {\n                    \"identity_files\": [\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_FRONT\"\n                        },\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_BACK\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"business_details\": {\n            \"address\": {\n                \"country_code\": \"CN\"\n            },\n            \"business_name\": \"张三贸易有限公司\",\n            \"industry_category\": \"E-Commerce - Merchant\",\n            \"url\": \"{{$randomUrl}}\",\n            \"attachments\": {\n                \"business_documents\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"BUSINESS_LICENSE\"\n                    }\n                ]\n            }\n        },\n        \"legal_rep_details\": {\n            \"identification_type\": \"PERSONAL_ID\",\n            \"nationality\": \"CN\",\n            \"attachments\": {\n                \"identity_files\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_FRONT\"\n                    },\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_BACK\"\n                    }\n                ]\n            }\n        }\n    },\n    \"account_usage\": {\n        \"card_usage\": [\n            \"NONE\"\n        ],\n        \"collection_country_codes\": [\n            \"CN\"\n        ],\n        \"collection_from\": [\n            \"CLIENTS_AND_OTHER_THIRD_PARTIES\"\n        ],\n        \"expected_monthly_transaction_volume\": {\n            \"amount\": \"100000.0\"\n        },\n        \"payout_country_codes\": [\n            \"CN\"\n        ],\n        \"payout_to\": [\n            \"CONNECTED_AWX_ACCOUNT\",\n            \"VENDORS_SUPPLIERS_OR_OTHER_THIRD_PARTY_BANK_ACCOUNT\",\n            \"WITHDRAWAL_TO_BANK_ACCOUNT_UNDER_THE_SAME_NAME\"\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true,\n        \"opt_in_for_marketing\": false\n    },\n    \"primary_contact\": {\n        \"email\": \"test+{{$guid}}@example.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/accounts/create"
							},
							"response": []
						},
						{
							"name": "Create an account - Individual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"connected_account_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "9078859c-a518-4042-a880-abd538d59e1e"
									}
								}
							],
							"id": "bcb86e33-1053-461e-b2c1-e04baa920121",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"individual_details\": {\n            \"address\": {\n                \"address_line1\": \"{{$randomStreetAddress}}\",\n                \"country_code\": \"HK\",\n                \"postcode\": \"25000\",\n                \"state\": \"{{$randomCity}}\",\n                \"suburb\": \"{{$randomCity}}\"\n            },\n            \"date_of_birth\": \"2000-01-01\",\n            \"first_name\": \"John\",\n            \"first_name_english\": \"John\",\n            \"last_name\": \"Doe\",\n            \"last_name_english\": \"Doe\",\n            \"photo_file_id\": \"{{file_id}}\",\n            \"nationality\": \"HK\",\n            \"primary_identification\": {\n                \"identification_type\": \"PERSONAL_ID\",\n                \"issuing_country_code\": \"HK\",\n                \"personal_id\": {\n                    \"front_file_id\": \"{{file_id}}\"\n                }\n            },\n            \"user_id_on_platform\": \"dummy_external_id_{{$guid}}\"\n        },\n        \"legal_entity_type\": \"INDIVIDUAL\"\n    },\n    \"account_usage\": {\n        \"card_usage\": [\n            \"PERSONAL_SPENDING\"\n        ],\n        \"collection_country_codes\": [\n            \"HK\"\n        ],\n        \"collection_from\": [\n            \"SELF_TOP_UP\"\n        ],\n        \"expected_monthly_transaction_volume\": {\n            \"amount\": \"5000\"\n        },\n        \"payout_country_codes\": [\n            \"HK\"\n        ],\n        \"payout_to\": [\n            \"OWN_BANK_ACCOUNT\"\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true\n    },\n    \"primary_contact\": {\n        \"email\": \"test+{{$guid}}@example.com\",\n        \"mobile\": \"{{$randomPhoneNumber}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/accounts/create"
							},
							"response": []
						},
						{
							"name": "Update a connected account",
							"id": "108f814c-5fcd-4d0a-856f-081b2529492b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_details\": {\n        \"beneficial_owners\": [\n            {\n                \"identification_type\": \"PERSONAL_ID\",\n                \"nationality\": \"CN\",\n                \"attachments\": {\n                    \"identity_files\": [\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_FRONT\"\n                        },\n                        {\n                            \"description\": \"{{filename}}\",\n                            \"file_id\": \"{{file_id}}\",\n                            \"tag\": \"PERSONAL_ID_BACK\"\n                        }\n                    ]\n                }\n            }\n        ],\n        \"business_details\": {\n            \"address\": {\n                \"country_code\": \"CN\"\n            },\n            \"industry_category\": \"E-Commerce - Merchant\",\n            \"purpose\": \"Payment to service providers - Shipping & Delivery Companies/Agencies\",\n            \"url\": \"http://www.example.com\",\n            \"attachments\": {\n                \"business_documents\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"BUSINESS_LICENSE\"\n                    }\n                ]\n            }\n        },\n        \"legal_rep_details\": {\n            \"attachments\": {\n                \"identity_files\": [\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_FRONT\"\n                    },\n                    {\n                        \"description\": \"{{filename}}\",\n                        \"file_id\": \"{{file_id}}\",\n                        \"tag\": \"PERSONAL_ID_BACK\"\n                    }\n                ]\n            },\n            \"identification_type\": \"PERSONAL_ID\",\n            \"nationality\": \"CN\"\n        }\n    },\n    \"account_usage\": {\n        \"card_usage\": [\n            \"NONE\"\n        ],\n        \"collection_country_codes\": [\n            \"CN\"\n        ],\n        \"collection_from\": [\n            \"CLIENTS_AND_OTHER_THIRD_PARTIES\"\n        ],\n        \"expected_monthly_transaction_volume\": {\n            \"amount\": \"100000.0\"\n        },\n        \"payout_country_codes\": [\n            \"CN\"\n        ],\n        \"payout_to\": [\n            \"CONNECTED_AWX_ACCOUNT\",\n            \"VENDORS_SUPPLIERS_OR_OTHER_THIRD_PARTY_BANK_ACCOUNT\",\n            \"WITHDRAWAL_TO_BANK_ACCOUNT_UNDER_THE_SAME_NAME\"\n        ]\n    },\n    \"customer_agreements\": {\n        \"agreed_to_data_usage\": true,\n        \"agreed_to_terms_and_conditions\": true,\n        \"opt_in_for_marketing\": false\n    },\n    \"primary_contact\": {\n        \"email\": \"test+{{$guid}}@example.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/update",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"update"
									],
									"variable": [
										{
											"id": "d41b2254-2f35-44b1-ac8c-a6d23cad89a4",
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Submit account for activation",
							"id": "0d48983a-67d7-4158-9eca-e3f3914a92e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"submit"
									],
									"variable": [
										{
											"id": "0359da6c-d720-4d4a-96de-46b98bae3b7e",
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get account by ID",
							"id": "7f43f86e-450f-4de5-bdf1-897ad282a668",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id"
									],
									"variable": [
										{
											"id": "b43bd265-8612-40d7-87a6-9932c910c6e5",
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of connected accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "e1352fa9-9d9a-40a8-8adf-a557a03c3f6a"
									}
								}
							],
							"id": "b0df5ca4-c68d-4bad-8f7c-59cdd7d0c1e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "account_status",
											"value": "",
											"description": "The status of the account. Can be CREATED, SUBMITTED, ACTION_REQUIRED, ACTIVE, SUSPENDED",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"description": "The primary email to be associated with the administration of the account",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "identifier",
											"value": "",
											"description": "The identifier that the platform uses to identify a merchant, usually a unique merchant ID.",
											"disabled": true
										},
										{
											"key": "metadata",
											"value": "",
											"description": "The metadata of the account. The value should be set in key:value format. (e.g., id:1)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100., maximum 500",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve account details",
							"id": "4b172df2-f77a-4951-9ed5-e55e469fbcb0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/account"
							},
							"response": []
						},
						{
							"name": "Agree to terms and conditions",
							"id": "e84b22ac-d7cc-445d-bd8a-7475d396ff5e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/accounts/:connected_account_id/terms_and_conditions/agree",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"accounts",
										":connected_account_id",
										"terms_and_conditions",
										"agree"
									],
									"variable": [
										{
											"id": "4b272231-92a6-4bce-989e-582a816653d3",
											"key": "connected_account_id",
											"value": "{{connected_account_id}}",
											"description": "(Required) Airwallex account ID"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2e68284b-d88d-4b1c-bd3c-1eabe56f765e"
				},
				{
					"name": "Charges",
					"item": [
						{
							"name": "Get list of charges",
							"id": "a5f36a9f-e937-4b0c-8a96-b6bb16e532e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/charges",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"charges"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency (3-letter ISO-4217 code)",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100., minimum 10, maximum 2000",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "Charge request_id",
											"disabled": true
										},
										{
											"key": "source",
											"value": "",
											"description": "Airwallex account ID",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the charge, one of: NEW, PENDING, SETTLED,SUSPENDED",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a charge by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let charge_id = pm.environment.get(\"charge_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof charge_id === \"undefined\" || charge_id === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/charges\";",
											"    console.warn(`Environment variable 'charge_id' is not set, calling ${request_url} to default it.`);",
											"    ",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: {\"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\")}",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'charge_id' to the first charge ${res.json().items[0].id}`);",
											"            pm.variables.set(\"charge_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'charge_id' is not set, and cannot set a default, as there is no charge returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "c8239a6f-020a-4faf-bb43-e1dee8ac0ca6"
									}
								}
							],
							"id": "6d231fd3-a8e6-4445-ae8c-477ef52e2156",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/charges/:charge_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"charges",
										":charge_id"
									],
									"variable": [
										{
											"id": "c933d7c8-2e08-4194-ab8d-2257ba9958bd",
											"key": "charge_id",
											"value": "{{charge_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new charge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"connected_account_id\") === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/accounts\";",
											"    console.warn(`The variable 'connected_account_id' is not set, calling ${request_url} to default it.`);",
											"",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") }",
											"    }, function (err, res) {",
											"        active_account = res.json().items.find((x) => x.status === \"ACTIVE\");",
											"        if (active_account != undefined) {",
											"            console.info(`Defaulting 'connected_account_id' to the first ACTIVE account ${active_account.id}`);",
											"            pm.environment.set(\"connected_account_id\", active_account.id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'connected_account_id' is not set, and cannot set a default, as there is no ACTIVE account returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "f71e007a-150c-49f0-bf3e-e1c64dc6ecea"
									}
								}
							],
							"id": "c1bc869d-3c53-4324-bbf2-5a179107b671",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"10\",\n    \"currency\": \"USD\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Postman Test - {{$guid}}\",\n    \"request_id\": \"{{$guid}}\",\n    \"source\": \"{{connected_account_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/charges/create"
							},
							"response": []
						}
					],
					"id": "2e683ed9-c723-4e21-a5f2-0cc923ee501d"
				},
				{
					"name": "Hosted Flow",
					"item": [
						{
							"name": "Create flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"hosted_flow_instance_id\", JSON.parse(responseBody).id);"
										],
										"type": "text/javascript",
										"id": "dafd38b9-1063-4b93-93c2-20af0d3c8f7f"
									}
								}
							],
							"id": "db2d0f9a-1555-4637-b349-362cfa6306b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_id\": \"{{connected_account_id}}\",\n    \"template\": \"{{hosted_flow_template_id}}\",\n    \"return_url\": \"{{$randomUrl}}\",\n    \"error_url\": \"{{$randomUrl}}\",\n    \"metadata\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/hosted_flows/create"
							},
							"response": []
						},
						{
							"name": "Get flow",
							"id": "68ba2e10-b5fc-41aa-a713-fbd9fabd246d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/hosted_flows/:hosted_flow_instance_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"hosted_flows",
										":hosted_flow_instance_id"
									],
									"variable": [
										{
											"id": "15c93f18-0f8b-4c31-a3c7-313252c280cc",
											"key": "hosted_flow_instance_id",
											"value": "{{hosted_flow_instance_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authorize flow",
							"id": "521d9dce-9461-4d65-8234-89521c8e7916",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identity\": \"external_user_{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/hosted_flows/:hosted_flow_instance_id/authorize",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"hosted_flows",
										":hosted_flow_instance_id",
										"authorize"
									],
									"variable": [
										{
											"id": "f1b7701f-f96c-4612-a4af-35f27b8dca68",
											"key": "hosted_flow_instance_id",
											"value": "{{hosted_flow_instance_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "8e2b22b5-f99a-49a5-b01b-ab2a3ddd2bd7"
				},
				{
					"name": "Transfers",
					"item": [
						{
							"name": "Get list of transfers",
							"id": "9da79d9e-d12c-47ba-82a3-cc39a8288289",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/transfers",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers"
									],
									"query": [
										{
											"key": "currency",
											"value": null,
											"description": "Currency (3-letter ISO-4217 code)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "destination",
											"value": null,
											"description": "Airwallex account ID",
											"type": "text",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": null,
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": null,
											"description": "Page number, starts from 0.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": null,
											"description": "Number of results per page. Default value is 100., minimum 10, maximum 2000",
											"type": "text",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": null,
											"description": "Transfer request_id",
											"type": "text",
											"disabled": true
										},
										{
											"key": "status",
											"value": null,
											"description": "Status of the transfer. One of: NEW, SETTLED",
											"type": "text",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": null,
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a transfer by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"transfer_id = pm.environment.get(\"transfer_id\");",
											"",
											"// If the variable does not exist or is empty, default it.",
											"if (typeof transfer_id === \"undefined\" || transfer_id === \"\") {",
											"    request_url = pm.collectionVariables.get(\"url\") + \"/api/v1/transfers\";",
											"    console.warn(`Environment variable 'transfer_id' is not set, calling ${request_url} to default it.`);",
											"    ",
											"    pm.sendRequest({",
											"        url: request_url,",
											"        method: \"GET\",",
											"        header: {\"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\")}",
											"    }, function (err, res) {",
											"        if (res.json().items.length > 0) {",
											"            console.info(`Defaulting 'transfer_id' to the first transfer ${res.json().items[0].id}`);",
											"            pm.variables.set(\"transfer_id\", res.json().items[0].id);",
											"        }",
											"        else {",
											"            throw new Error(\"Environment variable 'transfer_id' is not set, and cannot set a default, as there is no transfer returned.\");",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"id": "00636d52-eb76-4243-a59c-c5d05fa734a4"
									}
								}
							],
							"id": "a5c16356-cdb1-4980-8874-eae69a40b7d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/transfers/:transfer_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"transfers",
										":transfer_id"
									],
									"variable": [
										{
											"id": "1af98923-6da5-4033-b9ed-8846bf7706a0",
											"key": "transfer_id",
											"value": "{{transfer_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new transfer",
							"id": "1bb27f4f-07c3-42d8-a161-b397d87761d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"10\",\n    \"currency\": \"USD\",\n    \"destination\": \"{{connected_account_id}}\",\n    \"reason\": \"professional_business_services\",\n    \"reference\": \"Postman Test - {{$guid}}\",\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/transfers/create"
							},
							"response": []
						}
					],
					"id": "c924d261-ba6f-4b6c-b738-9863a58bb03a"
				}
			],
			"id": "fc20851c-5ccb-41f0-bb16-75f6fdae1e2a"
		},
		{
			"name": "Simulation (Demo Only)",
			"item": [
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Update status of connected account",
							"id": "f836666f-82f8-4c6f-9a53-cbc88a02f74d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"force\": true,\n    \"next_status\": \"ACTIVE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/accounts/:account_id/update_status",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"accounts",
										":account_id",
										"update_status"
									],
									"variable": [
										{
											"id": "8ecc0f1a-a508-4815-96f3-df1e69767f33",
											"key": "account_id",
											"value": "{{connected_account_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7e4cebd0-eaa9-4154-b635-c89dbb963b40"
				},
				{
					"name": "Cards",
					"item": [
						{
							"name": "Create a transaction for the provided card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"issuing_transaction_id\", JSON.parse(responseBody).transaction_id);"
										],
										"type": "text/javascript",
										"id": "82586ebb-1ff1-43cb-828e-bc5807868686"
									}
								}
							],
							"id": "9c6d9ba2-1b5b-413b-b01e-7b9cb389e805",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"auth_code\": \"\",\n    \"card_id\": \"{{card_id}}\",       \n    \"card_number\": \"{{card_number}}\",\n    \"merchant_category_code\": \"\",\n    \"merchant_info\": \"Airwallex Cards Simulation\",\n    \"transaction_amount\": 10.10,\n    \"transaction_currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/simulation/issuing/create"
							},
							"response": []
						},
						{
							"name": "Capture the transaction with the provided id",
							"id": "38f931d6-635e-4199-89e6-d52ebfb3cb36",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/simulation/issuing/:transaction_id/capture",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"issuing",
										":transaction_id",
										"capture"
									],
									"variable": [
										{
											"id": "9e596253-7835-400d-b5c1-b5f55649bef4",
											"key": "transaction_id",
											"value": "{{issuing_transaction_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "a12b553c-73b8-423d-be11-7b116a5e1ba9"
				},
				{
					"name": "Global Account",
					"item": [
						{
							"name": "Create a global account deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d65d967-8688-4dcf-a7b4-e89e3a635d81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b43846a7-570a-4387-bd50-b454c6b6567d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8799b55b-93ec-42f2-b078-3106c2f8fcdf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": \"1000\",\n    \"global_account_id\": \"{{global_account_id}}\",\n    \"payer_bankname\": \"Postman Bank\",\n    \"payer_country\": \"CN\",\n    \"payer_name\": \"Postman\",\n    \"reference\": \"Test from Postman\",\n    \"status\": \"SETTLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/simulation/deposit/create"
							},
							"response": []
						}
					],
					"id": "a219f725-32bf-4f3f-8788-222a4c4ef7b5"
				},
				{
					"name": "Payouts",
					"item": [
						{
							"name": "Transition Payment Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3efeb029-c64c-4ebf-a6d4-9382b5254910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c66c8ab8-020b-4468-8325-dbe0695fd392",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"failure_type\": \"\",\n    \"next_status\": \"DISPATCHED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/simulation/payments/:payment_id/transition",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"simulation",
										"payments",
										":payment_id",
										"transition"
									],
									"variable": [
										{
											"id": "c7e9d2c7-077d-4897-ae5c-84e506ddf94b",
											"key": "payment_id",
											"value": "{{payment_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "46128a01-5372-4bb6-a0bd-404bb55e938d"
				}
			],
			"id": "d1f16a01-36cc-49d1-aa01-1375473ecb77"
		},
		{
			"name": "Supporting Services",
			"item": [
				{
					"name": "File Service",
					"item": [
						{
							"name": "Get onboarding file download links",
							"id": "57e15659-6fcd-457d-b9d6-160a84a2cde0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"file_ids\": [\n        \"{{file_id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/files/download_links"
							},
							"response": []
						},
						{
							"name": "Upload a file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"file_id\", JSON.parse(responseBody).file_id);",
											"pm.environment.set(\"filename\", JSON.parse(responseBody).filename);"
										],
										"type": "text/javascript",
										"id": "974eca1b-ce6e-4a70-9498-b786f72560e3"
									}
								}
							],
							"id": "6c552f6a-0326-42e4-9bfa-a27b35643c4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Volumes/GoogleDrive/My Drive/Pictures/身份证样本-正面.jpg"
										}
									]
								},
								"url": {
									"raw": "{{file_url}}/api/v1/files/upload",
									"host": [
										"{{file_url}}"
									],
									"path": [
										"api",
										"v1",
										"files",
										"upload"
									],
									"query": [
										{
											"key": "notes",
											"value": "Postman Test by Eddie Chiang",
											"description": "The notes of the uploaded file, max length is 50 characters",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3030592e-2bff-4f78-9353-39c33e75bd7d"
				},
				{
					"name": "Notification",
					"item": [
						{
							"name": "Create a new notification",
							"id": "ec312f22-52a4-4b73-88d1-ea55b590b1ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"deliver_type\": \"EMAIL\",\n    \"source_id\": \"{{connected_account_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/notifications/create"
							},
							"response": []
						}
					],
					"id": "09ecb812-1a51-4924-b182-f19e815e1bd7"
				},
				{
					"name": "Reference Data",
					"item": [
						{
							"name": "Industry categories",
							"id": "a63802ec-351d-475d-a8db-dd63a4d82f76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/reference/industry_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"industry_categories"
									],
									"query": [
										{
											"key": "name",
											"value": "",
											"description": "Name of industry category.",
											"disabled": true
										},
										{
											"key": "sub_items",
											"value": "",
											"description": "List of industry subcategories associated with the industry category.",
											"disabled": true
										},
										{
											"key": "type",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid conversion dates",
							"id": "e6d7e95b-3e9b-4a3e-bad1-6bf8c7851a67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/reference/invalid_conversion_dates?currency_pair=USDCNY",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"invalid_conversion_dates"
									],
									"query": [
										{
											"key": "currency_pair",
											"value": "USDCNY",
											"description": "Currency pair to get the invalid conversion dates for"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Settlement accounts",
							"id": "aceb8099-1f78-4424-8a67-b65762411e6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/reference/settlement_accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"reference",
										"settlement_accounts"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Return settlement account for this currency only",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Supported currencies",
							"id": "c261e726-3131-4e8c-960b-d0699aebf782",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/reference/supported_currencies"
							},
							"response": []
						}
					],
					"id": "f778fdc8-29f8-4b41-b8e2-8ab836fe085f"
				}
			],
			"id": "75c5303e-e051-4c0d-8a89-f779d32dc4e9"
		},
		{
			"name": "Transactional FX",
			"item": [
				{
					"name": "Conversion",
					"item": [
						{
							"name": "Create a conversion - buy_amount based",
							"id": "2d38207a-56b6-4871-b9e7-41ff1f7c6db7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"buy_amount\": \"10000\",\n  \"buy_currency\": \"AUD\",\n  \"conversion_date\": null,\n  \"quote_id\": \"{{quote_id}}\",\n  \"reason\": \"For settling a payment\",\n  \"request_id\": \"{{$guid}}\",\n  \"sell_currency\": \"CNY\",\n  \"term_agreement\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/conversions/create"
							},
							"response": []
						},
						{
							"name": "Create a conversion - sell_amount based",
							"id": "37f41123-0fc6-48ae-8931-0f178489805b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"buy_currency\": \"AUD\",\n  \"conversion_date\": null,\n  \"quote_id\": \"{{quote_id}}\",\n  \"reason\": \"For settling a payment\",\n  \"request_id\": \"{{$guid}}\",\n  \"sell_amount\": 10000,\n  \"sell_currency\": \"CNY\",\n  \"term_agreement\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/conversions/create"
							},
							"response": []
						},
						{
							"name": "Retrieve a specific conversion",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1855259c-95e4-41cb-9ae6-60190c837bef"
									}
								}
							],
							"id": "bdbd3953-5ab4-43b2-983f-ea56c046bbf9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/conversions/:conversion_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"conversions",
										":conversion_id"
									],
									"variable": [
										{
											"id": "2a3a944e-a57a-484e-b17b-58aa83a1cb6a",
											"key": "conversion_id",
											"value": "{{conversion_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List conversions",
							"id": "5db7411c-4beb-49dc-a352-e61ac7c4b7b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/conversions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"conversions"
									],
									"query": [
										{
											"key": "buy_currency",
											"value": "",
											"description": "Currency that the client bought (in 3-letter ISO-4217 format).",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The starting value for specifying a date range for results to be returned. The date range is specific to conversion creation (a conversion’s created_at date). Specify a starting created_at date (in ISO-8601 format). This starting date is inclusive of the range.",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "Client-supplied conversion request_id (idempotency key).",
											"disabled": true
										},
										{
											"key": "sell_currency",
											"value": "",
											"description": "Currency that the client sold (in 3-letter ISO-4217 format).",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the conversion. Can be one of AWAITING_FUNDS,CANCELLED,PENDING_SETTLEMENT,SETTLED,ROLLOVER_REQUESTED,PENDING_ROLLOVER.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The ending value for specifying a date range for results to be returned. The date range is specific to conversion creation (a conversion’s created_at date). Specify an ending created_at date (in ISO-8601 format). This ending date is inclusive of the range.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reverse a settled conversion",
							"id": "7265ff64-de0c-4e53-a83f-74547cd51071",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/conversions/:conversion_id/reverse",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"conversions",
										":conversion_id",
										"reverse"
									],
									"variable": [
										{
											"id": "5652015d-c2fd-488d-8e8c-22f4b18d8c55",
											"key": "conversion_id",
											"value": "{{conversion_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "9ae7f530-0eae-46c0-a85a-b0a97c04bc3a",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":conversion_id\"))",
									"    return;",
									"",
									"let conversion_id = pm.environment.get(\"conversion_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof conversion_id === \"undefined\" || conversion_id === \"\") {",
									"    let baseUrl = pm.environment.get(\"url\") === undefined ? pm.collectionVariables.get(\"url\") : pm.environment.get(\"url\");",
									"    request_url = baseUrl + \"/api/v1/conversions\";",
									"    console.warn(`Environment variable 'conversion_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        if (res.json().length > 0) {",
									"            console.info(`Defaulting 'conversion_id' to the first transaction ${res.json()[0].conversion_id}`);",
									"            pm.variables.set(\"conversion_id\", res.json()[0].conversion_id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'conversion_id' is not set, and cannot set a default, as there is no conversion returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "f6a447c8-eeb4-4c7b-8e86-76373cfd35d6"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "7b5c60b5-57bb-4596-920f-ce3d18f201bf"
							}
						}
					]
				},
				{
					"name": "Lock FX",
					"item": [
						{
							"name": "Create LockFX quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"quote_id\", JSON.parse(responseBody).quote_id);"
										],
										"type": "text/javascript",
										"id": "09829af3-e852-41af-a6ce-e4ed378a9b1c"
									}
								}
							],
							"id": "a55e1c05-f1ea-4df9-8e37-a7f2deef7c32",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"buy_amount\": null,\n    \"buy_currency\": \"AUD\",\n    \"conversion_date\": null,\n    \"sell_amount\": 100,\n    \"sell_currency\": \"USD\",\n    \"validity\": \"MIN_1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/lockfx/create"
							},
							"response": []
						}
					],
					"id": "c36e648c-3c9e-4667-897c-027782424cf7"
				},
				{
					"name": "Market FX",
					"item": [
						{
							"name": "Get indicative market quote",
							"id": "93e2ebb7-13b2-4b7b-b49a-d484e9eefdbb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/marketfx/quote?buy_currency=USD&sell_currency=CNY&buy_amount=10",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"marketfx",
										"quote"
									],
									"query": [
										{
											"key": "buy_currency",
											"value": "USD",
											"description": "Currency (3-letter ISO-4217 code) the client buys"
										},
										{
											"key": "sell_currency",
											"value": "CNY",
											"description": "Currency (3-letter ISO-4217 code) the client sells. This is the currency you will need to send us by the settlement cutoff time"
										},
										{
											"key": "buy_amount",
											"value": "10",
											"description": "Amount the client buys in buy_currency (must be blank if sell_amount is specified)"
										},
										{
											"key": "conversion_date",
											"value": "",
											"disabled": true
										},
										{
											"key": "sell_amount",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "486258ed-390f-4ae3-858f-a0324cc182d0"
				}
			],
			"id": "bc8353e6-d693-4a7c-9bf6-325e2c525555"
		},
		{
			"name": "Treasury",
			"item": [
				{
					"name": "Balances",
					"item": [
						{
							"name": "Get current balances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "bbce7284-ac3f-42e9-876d-4f0263d7aa94"
									}
								}
							],
							"id": "6fc3a069-ceed-42a0-b899-b76e3cc93052",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{url}}/api/v1/balances/current"
							},
							"response": []
						},
						{
							"name": "Get balance history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "4a8508a2-1cd3-4bdd-b816-27075053e81d"
									}
								}
							],
							"id": "75f8ffd3-316f-40cf-bf1a-95c52c898206",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/balances/history",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"balances",
										"history"
									],
									"query": [
										{
											"key": "currency",
											"value": "",
											"description": "Currency",
											"disabled": true
										},
										{
											"key": "from_post_at",
											"value": "",
											"description": "The start date of posted_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0. Max: 10000",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Limit number of returned results. Min: 10, max: 2000, default: 100",
											"disabled": true
										},
										{
											"key": "request_id",
											"value": "",
											"description": "request_id from clients for the transaction",
											"disabled": true
										},
										{
											"key": "to_post_at",
											"value": "",
											"description": "The end date of posted_at in ISO8601 format (exclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c5d0347b-7d78-4053-b0be-7c21342c8705"
				},
				{
					"name": "Deposits",
					"item": [
						{
							"name": "Get list of deposits",
							"id": "d34c5197-38ff-4688-9982-7103cd25cf0f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/deposits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"deposits"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "29ef246f-f722-4daf-820f-9b6998351c23"
				},
				{
					"name": "Global Accounts",
					"item": [
						{
							"name": "Get a list of global accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [],
										"type": "text/javascript",
										"id": "f37194aa-6f36-4869-98fc-feca4b33c5db"
									}
								}
							],
							"id": "f6a44801-cb25-4254-8364-3ed83c57c5e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts"
									],
									"query": [
										{
											"key": "country_code",
											"value": "",
											"description": "country_code",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "",
											"description": "currency",
											"disabled": true
										},
										{
											"key": "from_created_at",
											"value": "",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "nick_name",
											"value": "",
											"description": "nick_name",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "status of the account",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get global account by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "d83c3208-b107-474b-875e-9fe6914951e6"
									}
								}
							],
							"id": "73f2b454-9dcc-4e9b-bb96-791084fbad3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id"
									],
									"variable": [
										{
											"id": "f088ccb3-2a0f-45e7-ab96-d6fc943244b0",
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate global account statement - AMAZON",
							"id": "4f0f08c1-ca21-49b6-8cbd-0ea556a8697a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_statement_type\": \"AMAZON\",\n    \"registration_info\": {\n        \"agreement\": true,\n        \"registered_address\": {\n            \"address\": \"{{$randomStreetAddress}}\",\n            \"city\": \"{{$randomCity}}\",\n            \"country\": \"{{$randomCountry}}\",\n            \"postcode\": \"3000\",\n            \"state\": \"{{$randomCity}}\"\n        },\n        \"registered_email\": \"{{$randomExampleEmail}}\",\n        \"registered_name\": \"{{$randomFullName}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/generate_statement_letter",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"generate_statement_letter"
									],
									"variable": [
										{
											"id": "f1b87e5e-d26c-48b6-9734-b45a23361141",
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate global account statement - GENERAL",
							"id": "ab5244cd-3602-4a1f-845d-7ec9cf864712",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_statement_type\": \"GENERAL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/generate_statement_letter",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"generate_statement_letter"
									],
									"variable": [
										{
											"id": "5208cc81-2e94-4bf4-8d5b-0531e48ac06b",
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get global account transactions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "18349867-ec75-47fa-a7b4-9238bb3a27bb"
									}
								}
							],
							"id": "39fa16ea-0c04-4506-befd-de6a4f010dbf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"description": "The connected account's ID.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/api/v1/global_accounts/:global_account_id/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"global_accounts",
										":global_account_id",
										"transactions"
									],
									"query": [
										{
											"key": "from_created_at",
											"value": "2021-12-21",
											"description": "The start date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										},
										{
											"key": "page_num",
											"value": "",
											"description": "Page number, starts from 0",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "",
											"description": "Number of results per page. Default value is 100.",
											"disabled": true
										},
										{
											"key": "to_created_at",
											"value": "2021-12-21T19:00:00+0800",
											"description": "The end date of created_at in ISO8601 format (inclusive)",
											"disabled": true
										}
									],
									"variable": [
										{
											"id": "5861923a-d4d6-4b73-86b9-a61e46bf05d6",
											"key": "global_account_id",
											"value": "{{global_account_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a global account",
							"id": "59834024-c424-4904-8a7b-d0cd7434076d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-on-behalf-of",
										"value": "{{connected_account_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country_code\": \"{country_code}\",\n    \"currency\": \"{currency}\",\n    \"nick_name\": \"My New Global Account\",\n    \"payment_methods\": [\n        \"LOCAL\",\n        \"SWIFT\"\n    ],\n    \"request_id\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/global_accounts/create",
								"description": "Replace {country_code} and {currency} with supported actual country code and currency mentioned in Airwallex API Reference :-\n\n[https://www.airwallex.com/docs/api#/Core_Resources/Global_Accounts/_api_v1_global_accounts_create/post](https://www.airwallex.com/docs/api#/Core_Resources/Global_Accounts/_api_v1_global_accounts_create/post)\n\nGlobal Accounts can accept payments locally using LOCAL payment methods and internationally using SWIFT. Pass the required payment methods in payment_methods field."
							},
							"response": []
						}
					],
					"id": "31cecee7-97cf-482a-8bd7-f3a06b2c4f7a",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let request_url_path = \"/\" + pm.request.url.path.join(\"/\");",
									"if (!request_url_path.includes(\":global_account_id\"))",
									"    return;",
									"",
									"let global_account_id = pm.environment.get(\"global_account_id\");",
									"",
									"// If the variable does not exist or is empty, default it.",
									"if (typeof global_account_id === \"undefined\" || global_account_id === \"\") {",
									"    request_url = BASE_URL + \"/api/v1/global_accounts\";",
									"    console.warn(`Environment variable 'global_account_id' is not set, calling ${request_url} to default it.`);",
									"",
									"    pm.sendRequest({",
									"        url: request_url,",
									"        method: \"GET\",",
									"        header: UTILITY.getRequestHeader()",
									"    }, function (err, res) {",
									"        active_global_account = res.json().items !== undefined ? res.json().items.find((x) => x.status === \"ACTIVE\") : undefined;",
									"        if (active_global_account !== undefined) {",
									"            console.info(`Defaulting 'global_account_id' to the first ACTIVE global account ${active_global_account.id}`);",
									"            pm.variables.set(\"global_account_id\", active_global_account.id);",
									"        }",
									"        else {",
									"            throw new Error(\"Environment variable 'global_account_id' is not set, and cannot set a default, as there is no ACTIVE global account returned.\");",
									"        }",
									"    });",
									"}"
								],
								"id": "5a4223ef-aae9-4b8c-b53c-16e9dae55f91"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2dbda27a-476c-4efd-803c-f75ab2ac76f3"
							}
						}
					]
				},
				{
					"name": "Direct Debit LBA",
					"item": [
						{
							"name": "Simulation",
							"item": [
								{
									"name": "Settle",
									"id": "aec0d819-5752-450f-b8a2-cc0766afa35f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/settle",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulation",
												"deposits",
												":deposit_id",
												"settle"
											],
											"variable": [
												{
													"id": "018267d0-a715-47c0-b26f-bc1f2c19d1a1",
													"key": "deposit_id",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reverse",
									"id": "34f53eea-ca9e-41c9-b54b-56965358d90c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/reverse",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulation",
												"deposits",
												":deposit_id",
												"reverse"
											],
											"variable": [
												{
													"id": "decf225e-faac-47db-8a82-7ebd642da094",
													"key": "deposit_id",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reject",
									"id": "a36034ed-5cae-4c45-b05c-6c9a1072a6f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulation/deposits/:deposit_id/reject",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulation",
												"deposits",
												":deposit_id",
												"reject"
											],
											"variable": [
												{
													"id": "a5931d10-f8ff-478c-8a5c-224d664bfb21",
													"key": "deposit_id",
													"value": null
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "64619055-727f-4b7a-a8d2-5e1a21545774",
							"description": "Simulate the status of Deposits using Simulation API [https://www.airwallex.com/docs/api#/Simulation_(Demo_Only)/Deposits/Intro](https://www.airwallex.com/docs/api#/Simulation_(Demo_Only)/Deposits/Intro)"
						},
						{
							"name": "Get Linked Bank Accounts",
							"id": "e9a30b79-c753-43f2-a2da-35dfe9c43407",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/linked_accounts"
							},
							"response": []
						},
						{
							"name": "Create Linked Bank Account",
							"id": "69c230e5-456a-4b58-b5a6-96dcb42fea11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\":\"US_BANK\",\n    \"us_bank\": {\n    \"account_name\": \"Connected Account Demo\",\n    \"account_number\": \"000000000000\",//replace this with a sample bank account number\n    \"ach\": \"000000000\",//sample routing number\n    \"currency\": \"USD\",\n    \"entity_type\": \"BUSINESS\"\n  },\n  \"preferred_verification_type\":\"MICRO_DEPOSIT\"\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/linked_accounts/create"
							},
							"response": []
						},
						{
							"name": "Verify Linked Account with micro-deposits",
							"id": "57d41ae5-803c-4a85-ba71-b8af2a7f77e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amounts\": [\n    0.01,\n    0.02\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:lba_id/verify_microdeposits",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":lba_id",
										"verify_microdeposits"
									],
									"variable": [
										{
											"id": "334ee3ef-f593-43b6-8228-0c291184e7d6",
											"key": "lba_id",
											"value": null,
											"description": "Linked Bank Account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mandate",
							"id": "dca75fd1-e5f5-4417-b62f-257c4172902b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:lba_id/mandate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":lba_id",
										"mandate"
									],
									"variable": [
										{
											"id": "c6c6d787-e147-4492-8f0f-b6a301cb949c",
											"key": "lba_id",
											"value": null,
											"description": "Linked Bank Account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Mandate for LBA",
							"id": "b911142d-6484-4eea-b3d2-bdb9c8e222dc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"signatory\": \"Tester Smith\",\n  \"type\": \"US_ACH_DEBIT\",\n  \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/linked_accounts/:lba_id/mandate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"linked_accounts",
										":lba_id",
										"mandate"
									],
									"variable": [
										{
											"id": "93daf56b-20e9-4c90-a84e-ebd1ee17abb6",
											"key": "lba_id",
											"value": null,
											"description": "Linked Bank Account ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Funding limits",
							"id": "55727492-67a5-4428-a08f-e7af14336234",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/account_capabilities/funding_limits"
							},
							"response": []
						}
					],
					"id": "adf8424d-0165-4b86-ada7-fd63c0c5f7a4",
					"description": "Use Linked Accounts feature to link an external Bank Account with your Airwallex account to top up funds into your Airwallex account. API reference [https://www.airwallex.com/docs/api#/Core_Resources/Linked_Accounts/Intro](https://www.airwallex.com/docs/api#/Core_Resources/Linked_Accounts/Intro)"
				}
			],
			"id": "80f3bd65-3583-4cfc-bad9-4374b2ca314a"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearer_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "604eec6e-cf45-41d6-bbe0-b507f472a626",
				"type": "text/javascript",
				"exec": [
					"/************************************************",
					" * This collection pre-request script runs before the request one.",
					" ***********************************************/",
					"",
					"// Global variables and functions",
					"BASE_URL = pm.variables.get(\"url\");",
					"",
					"UTILITY = {",
					"    getRequestHeader: function () {",
					"        if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\") === undefined) {",
					"            throw Error(\"Missing 'x-on-behalf-of' in the HTTP Header.\")",
					"        }",
					"        else if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\" && x.disabled === true)) {",
					"            return { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") };",
					"        }",
					"        else {",
					"            let connectedAccountId = pm.request.headers.find((x) => x.key === \"x-on-behalf-of\").value;",
					"            connectedAccountId = connectedAccountId === \"{{connected_account_id}}\" ? pm.environment.get(\"connected_account_id\") : connectedAccountId;",
					"",
					"            return {",
					"                \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\"),",
					"                \"x-on-behalf-of\": connectedAccountId",
					"            };",
					"        }",
					"    }",
					"};",
					"",
					"// Initialize environment variables. ",
					"if (typeof pm.environment.get(\"connected_account_id\") === 'undefined')",
					"    pm.environment.set(\"connected_account_id\", \"\");",
					"",
					"// Test the bearer_token expiry.",
					"if (\"/\" + pm.request.url.path.join(\"/\") === \"/api/v1/authentication/login\")",
					"    return;",
					"",
					"let loginUrl = BASE_URL + \"/api/v1/authentication/login\";",
					"console.info(`bearer_token invalid, calling ${loginUrl} to refresh...`);",
					"",
					"// Obtain access token, before each request.",
					"let clientId = pm.variables.get(\"clientId\");",
					"let apiKey = pm.variables.get(\"apiKey\");",
					"",
					"if (clientId === \"\" || apiKey === \"\") {",
					"    throw new Error(\"Please set the values for the variables 'clientId' or 'apiKey'.\");",
					"}",
					"",
					"pm.sendRequest({",
					"    url: loginUrl,",
					"    method: \"POST\",",
					"    header: {",
					"        \"x-client-id\": clientId,",
					"        \"x-api-key\": apiKey",
					"    }",
					"}, function (err, res) {",
					"    pm.environment.set(\"bearer_token_expires_at\", res.json().expires_at);",
					"    pm.environment.set(\"bearer_token\", res.json().token);",
					"",
					"    // pm.sendRequest() is asynchronous, so only execute the function after the bearer_token is set.",
					"    executeWithValidBearerToken(BASE_URL);",
					"});",
					"",
					"// Encode query parameters, e.g. 2021-12-21T18:50:00+08:00 -> 2021-12-21T18%3A50%3A00%2B08%3A00.",
					"pm.request.url.query.filter((x) => x.disabled === undefined).forEach((x) => x.value = encodeURIComponent(x.value));",
					"",
					"function executeWithValidBearerToken(baseUrl) {",
					"    if (pm.environment.get(\"connected_account_id\") === \"\") {",
					"        if (pm.request.headers.find((x) => x.key === \"x-on-behalf-of\" && (x.disabled === undefined || x.disabled === false))) {",
					"            request_url = baseUrl + \"/api/v1/accounts\";",
					"            console.warn(`HTTP Header 'x-on-behalf-of' is on, but the environment variable 'connected_account_id' is not set, calling ${request_url} to default it.`);",
					"",
					"            pm.sendRequest({",
					"                url: request_url,",
					"                method: \"GET\",",
					"                header: { \"Authorization\": \"Bearer \" + pm.environment.get(\"bearer_token\") }",
					"            }, function (err, res) {",
					"                active_account = res.json().items.find((x) => x.status === \"ACTIVE\");",
					"                if (active_account != undefined) {",
					"                    console.info(`Defaulting 'connected_account_id' to the first ACTIVE account ${active_account.id}`);",
					"                    pm.environment.set(\"connected_account_id\", active_account.id);",
					"                }",
					"                else {",
					"                    throw new Error(\"Environment variable 'connected_account_id' is not set, and cannot set a default, as there is no ACTIVE account returned.\");",
					"                }",
					"            });",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c22fe638-0cdb-456c-95a7-b427126c7766",
				"type": "text/javascript",
				"exec": [
					"if (pm.request.method === \"POST\") {",
					"    pm.test(\"Successful POST request\", () => {",
					"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
					"    });",
					"}",
					"else {",
					"    pm.test(\"Status code is 200\", () => {",
					"        pm.response.to.have.status(200);",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "7bbb0cf8-b7de-4b4c-960d-a9fb7f0dcb7e",
			"key": "clientId",
			"value": "NIPWz6LJQKCM1WMRLs4G2g"
		},
		{
			"id": "a18320d2-ef11-4de5-92b1-fac060c7f72b",
			"key": "apiKey",
			"value": "79d5311bff82920884e9dab1666300ac4a94ad44b40e096d8e8b9b8b5a9e0b2ab87d25c60f96960522e016f168873301"
		},
		{
			"id": "e3201399-9a4b-4404-8b92-255c4c90eb39",
			"key": "url",
			"value": "https://api-demo.airwallex.com"
		},
		{
			"id": "204d2f64-d14e-4687-9c5d-a7da1d78ca90",
			"key": "file_url",
			"value": "https://files-demo.airwallex.com"
		}
	]
}